# 15.7 Угадайка слов

# Угадайка слов

# Описание проекта: программа загадывает слово, а пользователь должен его угадать. Изначально все буквы слова
# неизвестны. Также рисуется виселица с петлей. Пользователь предлагает букву, которая может входить в это слово.
# Если такая буква есть в слове, то программа ставит букву столько раз, сколько она встречается в слове.
# Если такой буквы нет, к виселице добавляется круг в петле, изображающий голову. Пользователь продолжает отгадывать
# буквы до тех пор, пока не отгадает всё слово. За каждую неудачную попытку добавляется еще одна часть туловища
# висельника (обычно их 6: голова, туловище, 2 руки и 2 ноги.

# Составляющие проекта:

# Целые числа (тип int);
# Переменные;
# Ввод / вывод данных (функции input() и print());
# Условный оператор (if/elif/else);
# Цикл while;
# Бесконечный цикл;
# Операторы break, continue;
# Создание пользовательских функций;
# Списочные выражения;
# Работа с модулем random для генерации случайных чисел.

# Примечания

# Примечание 1. На английском игра называется Hangman.

# Примечание 2. Почитать подробнее об игре можно тут.

# Заголовок программы

# Подключите модуль random;
# Создайте глобальный список word_list, содержащий слова, которые будут использоваться в игре.

# Функция, возвращающая случайное слово
# Напишите функцию get_word() которая возвращает случайное слово из списка word_list в верхнем регистре.

# Функция, возвращающая текущее состояние

# Функция display_hangman() принимает один аргумент tries – количество попыток угадывания слова – и возвращает текущее
# состояние игры в графическом виде:

# значение tries = 6 соответствует начальному положению, пустая виселица;
# ...
# значение tries = 0 соответствует конечному положению, то есть проигрышу и полностью нарисованному телу повешенного.

# Примечание. Для вывода символа бэкслеша \ используется экранирование символа с помощью \, то есть комбинация \\.

# функция получения текущего состояния
def display_hangman(tries):
    stages = [  # финальное состояние: голова, торс, обе руки, обе ноги
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # голова, торс, обе руки, одна нога
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # голова, торс, обе руки
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # голова, торс и одна рука
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # голова и торс
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # голова
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # начальное состояние
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]

# Функция play()

# Напишите функцию play(), в которой будет осуществляться основная логика игры. Функция play() принимает в качестве
# аргумента слово word, сгенерированное функцией  get_word().
def play(word):
    # тело функции
# Используйте следующие локальные переменные:

word_completion = '_' * len(word)  # строка, содержащая символы _ на каждую букву задуманного слова
guessed = False  # сигнальная метка
guessed_letters = []  # список уже названных букв
guessed_words = []  # список уже названных слов
tries = 6  # количество попыток

# Функция play() в самом начале должна:
#  отобразить текст 'Давайте играть в угадайку слов!';
# отобразить текущее состояние игры, распечатав результат вызова функции display_hangman() с начальным количеством допустимых промахов tries = 6;
# отобразить начальное слово word_completion в виде строки с символом _ на каждую букву задуманного слова;

# Необходимо обрабатывать ввод букв или слова целиком. Предусмотрите защиту от дурака, на случай если пользователь ввел символ, не являющийся буквой;
# Если пользователь вводит уже названную букву или слово, то необходимо ему об этом сообщить, и не засчитывать попытку;
# Если пользователь угадал букву, то требуется заменить все символы _ соответствующие этой букве;
# Если пользователь угадал слово целиком, то следует его поздравить и вывести текст 'Поздравляем, вы угадали слово! Вы победили!';
# Если пользователь исчерпал все свои попытки и не угадал слово, следует вывести загаданное слово.
# Примечание. Переводите все символы в верхний регистр.

# Основной цикл программы
# Организуйте цикл, который будет содержать: генерацию случайного слова с помощью функции get_word(), а затем последующий вызов функции play().
# Организуйте повторный запуск игры, если пользователь пожелает играть еще раз.

# Улучшения проекта
# Можно отображать первую и последнюю букву слова;
# Слова можно выделить в категории и давать подсказку пользователю;
#
# Существует также вариант игры с 8 частями — добавляются ступни, а также самый длинный вариант, когда сначала за не отгаданную букву рисуются части самой виселицы.

# Друзья, делитесь в комментариях своей реализацией проекта =)

# Возможная реализация проекта

# 1. Заголовок программы:

import random

word_list = ['математика', 'геометрия', 'информатика', 'программирование', 'питон', 'образование', 'телефон']
# 2. Функция возвращающая случайное слово:

# функция получения случайного слова из списка слов
def get_word():
    word = random.choice(word_list)
    return word.upper()
# 3. Функция возвращающая текущее состояние:

# функция получения текущего состояния
def display_hangman(tries):
    stages = [  # финальное состояние: голова, торс, обе руки, обе ноги
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # голова, торс, обе руки, одна нога
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # голова, торс, обе руки
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # голова, торс и одна рука
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # голова и торс
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # голова
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # начальное состояние
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]
# 4. Функция play():

def play(word):
    word_completion = "_" * len(word)
    guessed = False
    guessed_letters = []
    guessed_words = []
    tries = 6

    print('Давайте играть в угадайку слов!')
    print(display_hangman(tries))
    print(word_completion)
    print()

    while not guessed and tries > 0:
        guess = input('Введите букву или слово целиком: ').upper()
        if len(guess) == 1 and guess.isalpha():
            if guess in guessed_letters:
                print('Вы уже называли букву', guess)
            elif guess not in word:
                print('Буквы', guess, 'нет в слове.')
                tries -= 1
                guessed_letters.append(guess)
            else:
                print('Отличная работа, буква', guess, 'присутствует в слове!')
                guessed_letters.append(guess)
                word_as_list = list(word_completion)
                indices = [i for i in range(len(word)) if word[i] == guess]
                for index in indices:
                    word_as_list[index] = guess
                word_completion = ''.join(word_as_list)
                if '_' not in word_completion:
                    guessed = True
        elif len(guess) == len(word) and guess.isalpha():
            if guess in guessed_words:
                print('Вы уже называли слово', guess)
            elif guess != word:
                print('Слово', guess, 'не является верным.')
                tries -= 1
                guessed_words.append(guess)
            else:
                guessed = True
                word_completion = word
        else:
            print('Введите букву или слово.')
        print(display_hangman(tries))
        print(word_completion)
        print()
    if guessed:
        print('Поздравляем, вы угадали слово! Вы победили!')
    else:
        print('Вы не угадали слово. Загаданным словом было ' + word + '. Может быть в следующий раз!')
# 5. Основной цикл программы:

again = 'д'

while again.lower() == 'д':
    word = get_word()
    play(word)
    again = input('Играем еще раз? (д = да, н = нет):')
