# 6.1 Числовые типы данных: int, float

# Тема урока: числовые типы данных
# Целочисленный тип данных int
# Числа с плавающей точкой float
# Встроенные функции max(), min(), abs()
# Решение задач

# Аннотация. Числовые типы данных. Вспомним особенности работы с целыми числами, научимся работать с числами с
# плавающей точкой. Изучим три встроенные функции для работы с числами max, min, abs.

# Целочисленный тип данных

# Целые числа в Python представлены типом данных int (сокращение int происходит от слова integer).
# Для определения целого числа типа int используется последовательность цифр от 0 до 9.

# Явно указанное численное значение в коде программы называется целочисленным литералом.
# Когда Python встречает целочисленный литерал, он создает объект типа int, хранящий указанное значение.

n = 17  # целочисленный литерал
m = 7  # целочисленный литерал

# Целочисленный тип данных int используют не только потому, что он встречается в реальном мире, но и потому,
# что он естественным образом возникает при создании большинства программ.
#
# Преобразование строки в целое число

# Для преобразования строки в целое число, мы используем команду int():

num = int(input())  # # преобразование считанной строки в целое число

# Для преобразования строки в целое число не обязательно использовать команду input().

# Следующий код преобразует строку 12345 в целое число:

n = int('12345')  # преобразование строки в целое число

# Если строка не является числом, то при преобразовании возникнет ошибка.

# Целочисленные операторы

# Язык Python предоставляет четыре основных арифметических оператора для работы с целыми числами (+, −, *, /),
# а также три дополнительных (% для остатка, // для целочисленного деления и ** для возведения в степень).


# Следующая программа демонстрирует все целочисленные операторы:
a = 13
b = 7

total = a + b
diff = a - b
prod = a * b
div1 = a / b
div2 = a // b
mod = a % b
exp = a ** b

print(a, '+', b, '=', total)
print(a, '-', b, '=', diff)
print(a, '*', b, '=', prod)
print(a, '/', b, '=', div1)
print(a, '//', b, '=', div2)
print(a, '%', b, '=', mod)
print(a, '**', b, '=', exp)

# В результате работы такой программы будет выведено:

# 13 + 7 = 20
# 13 - 7 = 6
# 13 * 7 = 91
# 13 / 7 = 1.8571428571428572
# 13 // 7 = 1
# 13 % 7 = 6
# 13 ** 7 = 62748517

# При обычном делении (/) получается число не являющееся целым. Деление на ноль приводит к ошибке.

# Длинная арифметика
# Отличительной особенностью языка Python является неограниченность целочисленного типа данных. По факту,
# размер числа зависит только от наличия свободной памяти на компьютере. Это отличает
# Python от таких языков как C++, C, C#, Java где переменные целого типа данных имеют ограничение.
# Например, в языке C# диапазон целых чисел ограничен от -2**63 до 2**63 - 1

atom = 10 ** 80  # количество атомов во вселенной
print('Количество атомов =', atom)

# Результатом выполнения программы будет число с 81 цифрой:
# Количество атомов = 100000000000000000000000000000000000000000000000000000000000000000000000000000000

# Символ разделитель

# Для удобного чтения чисел можно использовать символ подчеркивания:

num1 = 25_000_000
num2 = 25000000
print(num1)
print(num2)

# Результатом выполнения такого кода будет:

# 25000000
# 25000000

# Числа с плавающей точкой

# Наравне с целыми числами в Python есть возможность работы с дробными (вещественными) числами.
# Так, например, числа 2/3, 2**(-2), pi – являются вещественными и целого типа int недостаточно для их представления.

# Дробные (вещественные) числа в информатике называют числами с плавающей точкой.

# Для представления чисел с плавающей точкой в Python используется тип данных float.

e = 2.71828  # литерал с плавающей точкой
pi = 3.1415  # литерал с плавающей точкой

# В отличие от математики, где разделителем является запятая, в информатике используется точка.

# Преобразование строки к числу с плавающей точкой
# Для преобразования строки к числу с плавающей точкой мы используем команду float():
num = float(input())  # преобразование считанной строки в число с плавающей точкой
# Для преобразования строки к числу с плавающей точкой необязательно использовать команду input().
#
# Следующий код преобразует строку 1.2345 к числу с плавающей точкой:
n = float('1.2345')  # преобразование строки к числу с плавающей точкой

# Если строка не является числом, то при преобразовании возникнет ошибка.

# Арифметические операторы
# Язык Python предоставляет четыре основных арифметических оператора для работы с числами с плавающей точкой (+, −, *, /) и один дополнительный (** – для возведения в степень).
#
# Следующая программа демонстрирует арифметические операторы:

a = 13.5
b = 2.0

total = a + b
diff = a - b
prod = a * b
div = a / b
exp = a ** b

print(a, '+', b, '=', total)
print(a, '-', b, '=', diff)
print(a, '*', b, '=', prod)
print(a, '/', b, '=', div)
print(a, '**', b, '=', exp)

# В результате работы такой программы будет выведено:

# 13.5 + 2.0 = 15.5
# 13.5 - 2.0 = 11.5
# 13.5 * 2.0 = 27.0
# 13.5 / 2.0 = 6.75
# 13.5 ** 2.0 = 182.25

# Деление на ноль приводит к ошибке.

# Преобразование между int и float

# Неявное преобразование. Любое целое число (тип int) можно использовать там, где ожидается число с плавающей точкой
# (тип float), поскольку при необходимости Python автоматически преобразует целые числа в числа с плавающей точкой.

# Явное преобразование. Число с плавающей точкой нельзя неявно преобразовать в целое число.
# Для такого преобразования необходимо использовать явное преобразование с помощью команды int().

num1 = 17.89
num2 = -13.56
num3 = int(num1)
num4 = int(num2)
print(num3)
print(num4)

# Результатом выполнения такого кода будет:

# 17
# -13

# Обратите внимание, что преобразование чисел с плавающей точкой в целое производится с округлением в сторону нуля,
# то есть int(1.7) = 1, int(-1.7) = -1.

# Не путайте операцию преобразования и округления. Для округления чисел с
# плавающей точкой используются дополнительные команды. О них расскажем позже.

# Примечание

# Начинающих программистов необходимость преобразования типов зачастую раздражает, но опытные знают, что внимание
# к типам данных — залог успеха и способ избежать ошибок. В 1996 году французская ракета взорвалась в воздухе из-за
# проблемы преобразования типов. Хотя ошибка в вашей программе может и не привести к взрыву, все равно имеет смысл
# уделить время изучению преобразования типов. Написав несколько программ, вы убедитесь, что понимание типов данных
# помогает не только писать компактный код, но и ясно излагать свои намерения, избегая ошибок в нюансах.

# Площадь треугольника
# Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь.
# Формат входных данных
# На вход программе подаётся два числа с плавающей точкой – длины катетов, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число – площадь треугольника.

a = float(input())  # катет
b = float(input())  # катет
s = 1 / 2 * a * b  # площадь треугольника.
print(s)
# Sample Input 1:
#
# 443
# 390
# Sample Output 1:
#
# 86385.0
# Sample Input 2:
#
# 32.2
# 25.5
# Sample Output 2:
#
# 410.55
# Sample Input 3:
#
# 5544.25
# 6100.0
# Sample Output 3:
#
# 16909962.5

# Две старушки
# Две старушки идут навстречу друг другу с постоянными скоростями
# V1 и V2 км/ч. Определите, через какое время (в часах) старушки встретятся, если расстояние между ними равно S км.

# Формат входных данных
# На вход программе подаются три числа с плавающей точкой S, V1, V2, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести одно число в соответствии с условием задачи.

# Примечание. Это очень быстрые старушки.

s = float(input())  # скорость первой старушки
v1 = float(input())  # скорость второй старушки
v2 = float(input())   # растояние между ними

t = s / (v1 + v2)  # время когда они встретятся
print(t)
# Sample Input 1:
#
# 60.0
# 15.5
# 14.5
# Sample Output 1:
#
# 2.0
# Sample Input 2:
#
# 100.0
# 60.75
# 19.25
# Sample Output 2:
#
# 1.25
# Sample Input 3:
#
# 90.0
# 32.0
# 4.0
# Sample Output 3:
#
# 2.5

# Обратное число
# Напишите программу, которая считывает с клавиатуры одно число и выводит обратное ему. Если при этом введённое с
# клавиатуры число – ноль, то вывести «Обратного числа не существует» (без кавычек).

# Формат входных данных
# На вход программе подается одно действительное число.

# Формат выходных данных
# Программа должна вывести действительное число обратное данному, либо текст в соответствии с условием задачи.

number = float(input())  # одно действительное число
if number == 0:
    print('Обратного числа не существует')
else:
    number1 = number ** (-1)  # обратное число
    print(number1)
# Sample Input 1:
#
# 2.5
# Sample Output 1:
#
# 0.4
# Sample Input 2:
#
# -55.6
# Sample Output 2:
#
# -0.017985611510791366
# Sample Input 3:
#
# 0
# Sample Output 3:
#
# Обратного числа не существует

# 451 градус по Фаренгейту

# У известного американского писателя Рэя Бредбери есть роман «451 градус по Фаренгейту». Напишите программу,
# которая определяет, какой температуре по шкале Цельсия соответствует указанное значение по шкале Фаренгейта.

# Используйте формулу для перевода: C = 5 / 9 * (F - 32).

# Формат входных данных
# На вход программе подаётся вещественное число градусов по шкале Фаренгейта.

# Формат выходных данных
# Программа должна вывести число градусов по шкале Цельсия.

deg = float(input())  # число градусов по шкале Фаренгейту
c = 5 / 9 * (deg - 32)  # формула для перевода
print(c)
# Sample Input 1:
#
# 450.55
# Sample Output 1:
#
# 232.5277777777778
# Sample Input 2:
#
# 113.75
# Sample Output 2:
#
# 45.41666666666667
# Sample Input 3:
#
# 275.0
# Sample Output 3:
#
# 135.0

# Dog age

# На вход программе подается число n – количество собачьих лет.
# Напишите программу, которая вычисляет возраст собаки в человеческих годах.

# Формат входных данных
# На вход программе подаётся натуральное число – количество собачьих лет.

# Формат выходных данных
# Программа должна вывести возраст собаки в человеческих годах.

# Примечание. В течение первых двух лет собачий год равен
# 10.5 человеческим годам. После этого каждый год собаки равен  4 человеческим годам.

dog_age = int(input())  # количество собачьих лет
dog_age1 = 10.5
if 1 <= dog_age <= 2:
    print(dog_age * dog_age1)
else:
    print(dog_age1 * 2 + (dog_age - 2) * 4)
# Sample Input 1:
#
# 1
# Sample Output 1:
#
# 10.5
# Sample Input 2:
#
# 2
# Sample Output 2:
#
# 21
# Sample Input 3:
#
# 3
# Sample Output 3:
#
# 25

# Первая цифра после точки
# Дано положительное действительное число. Выведите его первую цифру после десятичной точки.
# Формат входных данных
# На вход программе подается положительное действительное число.

# Формат выходных данных
# Программа должна вывести цифру в соответствии с условием задачи.

number = float(input())  # действительное число
print(int((number * 10) % 10))
# Sample Input 1:
#
# 3384390.4339
# Sample Output 1:
#
# 4
# Sample Input 2:
#
# 1.5
# Sample Output 2:
#
# 5
# Sample Input 3:
#
# 459933200.23
# Sample Output 3:
#
# 2

# Дробная часть
# Дано положительное действительное число. Выведите его дробную часть.

# Формат входных данных
# На вход программе подается положительное действительное число.

# Формат выходных данных
# Программа должна вывести дробную часть числа в соответствии с условием задачи.

# Примечание. Числа с плавающей точкой (тип float) в Python хранятся в неточном виде,
# что связано с ограниченным количеством выделенных для них байт в памяти. Поэтому ваша программа может выдавать
# дробную часть от числа не в ожидаемом виде. Например, для числа 44.45 остаток может выглядеть как:
# 0.45000000000000284

# Наша проверяющая система засчитает как 0.45, так и 0.45000000000000284 правильными ответами.

number = float(input())
print(number - int(number))
# Sample Input 1:
#
# 44.45
# Sample Output 1:
#
# 0.45
# Sample Input 2:
#
# 39483.2
# Sample Output 2:
#
# 0.2
# Sample Input 3:
#
# 322.4958
# Sample Output 3:
#
# 0.4958

# Встроенные функции
# Python включает много заранее определенных функций. Программист не видит их реализацию, она скрыта.
# Достаточно знать, как эти функции называются и что они делают.

# Мы уже сталкивались с встроенными функциями:

# print() — вывести на экран;
# input() — считать с клавиатуры;
# int() — преобразовать к целому числу;
# float() — преобразовать к числу с плавающей точкой.

# Рассмотрим три новые встроенные функции, которые используются достаточно часто при работе с числами.

# Функции min() и max()

# Для определения соответственно минимального или максимального значения используются функции min() и max().
# Аргументов у этих функций может быть любое количество, главное, чтобы они все поддерживали
# между собой операцию сравнения (например, float и int поддерживают сравнение, а float и str - нет).

# Например, результатом выполнения следующего кода:

a = max(3, 8, -3, 12, 9)
b = min(3, 8, -3, 12, 9)
c = max(3.14, 2.17, 9.8)
print(a)
print(b)
print(c)

# будет:
# 12
# -3
# 9.8

# Функция abs()
# Модулем (абсолютной величиной) положительного числа называется само число, модулем отрицательного числа
# называется противоположное ему число, модуль нуля – нуль. Модуль числа  a обозначается ∣a∣,
# для него имеет место равенство:

# Для нахождения модуля (абсолютной величины) числа в Python используется функция abs().

# Например, результатом выполнения следующего кода:
print(abs(10))
print(abs(-7))
print(abs(0))
print(abs(-17.67))

# будет:
# 10
# 7
# 0
# 17.67

# Обратите внимание, все три функции max(), min(), abs() работают как с целыми числами,
# так и с числами с плавающей точкой.

# Какое число будет выведено на экран в результате выполнения следующего кода?
num = max(1, 3, -5, 7) + min(-3, 6, -8, -1) + abs(-17)
print(num)
# 16

# Наибольшее и наименьшее

# Напишите программу, которая находит наименьшее и наибольшее из пяти чисел.
# Формат входных данных
# На вход программе подается пять целых чисел, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести наименьшее и наибольшее число с поясняющей надписью.

num1 = int(input())
num2 = int(input())
num3 = int(input())
num4 = int(input())
num5 = int(input())

max1 = max(num1, num2, num3, num4, num5)
min1 = min(num1, num2, num3, num4, num5)
print(f"Наименьшее число = {min1}\n"
      f"Наибольшее число = {max1}")

# Sample Input 1:
#
# 1
# 2
# 3
# 4
# 5
# Sample Output 1:
#
# Наименьшее число = 1
# Наибольшее число = 5
# Sample Input 2:
#
# 454
# 453
# 32
# 8
# 6769
# Sample Output 2:
#
# Наименьшее число = 8
# Наибольшее число = 6769
# Sample Input 3:
#
# -3
# -11
# -499
# -888
# 0
# Sample Output 3:
#
# Наименьшее число = -888
# Наибольшее число = 0

# Сортировка трёх 🌶️
# Напишите программу, которая упорядочивает три числа от большего к меньшему.

# Формат входных данных
# На вход программе подается три целых числа, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести три числа, каждое на отдельной строке, упорядоченных от большего к меньшему.

num1 = int(input())
num2 = int(input())
num3 = int(input())

max1 = max(num1, num2, num3)
min1 = min(num1, num2, num3)
mid = num1 + num2 + num3 - max1 - min1
print(max1, mid, min1, sep='\n')
# Sample Input 1:
#
# 132
# 129
# 135
# Sample Output 1:
#
# 135
# 132
# 129
# Sample Input 2:
#
# 150
# 160
# 156
# Sample Output 2:
#
# 160
# 156
# 150
# Sample Input 3:
#
# 161
# 139
# 148
# Sample Output 3:
#
# 161
# 148
# 139

# Интересное число
# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине цифре.
# Напишите программу, которая определяет, интересное число или нет. Если число интересное,
# следует вывести «Число интересное», иначе - «Число неинтересное».

# Формат входных данных
# На вход программе подается целое трехзначное число.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

number = int(input())
first_digit = number // 100
second_digit = (number % 100) // 10
third_digit = number % 10
max1 = max(first_digit, second_digit, third_digit)
min1 = min(first_digit, second_digit, third_digit)
mid = first_digit + second_digit + third_digit - max1 - min1
if max1 - min1 == mid:
    print('Число интересное')
else:
    print('Число неинтересное')
# Sample Input 1:
#
# 945
# Sample Output 1:
#
# Число интересное
# Sample Input 2:
#
# 123
# Sample Output 2:
#
# Число интересное
# Sample Input 3:
#
# 896
# Sample Output 3:
#
# Число неинтересное

# Абсолютная сумма
# Даны пять чисел a1, a2, a3, a4, a5. Напишите программу, которая вычисляет сумму их модулей
# |a1| + |a2| + |a3| + |a4| + |a5|.

# Формат входных данных
# На вход программе подается пять действительных чисел a1, a2, a3, a4, a5 каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести одно число – сумму модулей введённых чисел.

a1, a2, a3, a4, a5 = float(input()), float(input()), float(input()), float(input()), float(input())

print(abs(a1) + abs(a2) + abs(a3) + abs(a4) + abs(a5))
# Sample Input 1:
#
# 5.4
# 33
# -1232
# -3.889
# 6
# Sample Output 1:
#
# 1280.289
# Sample Input 2:
#
# 0
# -776.4
# 0
# 343
# 55.24
# Sample Output 2:
#
# 1174.64
# Sample Input 3:
#
# -5.4643234
# 0
# 223
# 5
# 7
# Sample Output 3:
#
# 240.4643234

# Манхэттенское расстояние
# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути.
# Если только вы не умеете проходить сквозь стены, вам обязательно придется идти вдоль его
# параллельно-перпендикулярных улиц.

# На плоскости манхэттенское расстояние между двумя точками (p1 : p2) и (q1 : q2) определяется так |p1 - q1| + |p2 - q2|

# Напишите программу определяющую манхэттенское расстояние между двумя точками, координаты которых заданы.

# Формат входных данных
# На вход программе подается четыре целых числа, каждое на отдельной строке – p1, p2, q1, q2

# Формат выходных данных
# Программа должна вывести одно число – манхэттенское расстояние.

p1, p2, q1, q2 = int(input()), int(input()), int(input()), int(input())
print(abs(p1 - q1) + abs(p2 - q2))
# Sample Input:
#
# 10
# 15
# 21
# 13
# Sample Output:
#
# 13



