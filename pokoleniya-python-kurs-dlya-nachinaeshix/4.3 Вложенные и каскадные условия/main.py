# 4.3 Вложенные и каскадные условия

# Тема урока: условный оператор

# Вложенные условия
# Каскадные условия
# Решение задач

# Аннотация. Изучим вложенный и каскадный условный оператор.

# Вложенный оператор
# Внутри условного оператора можно использовать любые инструкции языка Python, в том числе и условный оператор.
# Получаем вложенное ветвление: после одной развилки в ходе исполнения программы появляется другая развилка.
# При этом вложенные блоки имеют больший размер отступа (+4 пробела для каждого следующего уровня

# if условие1:
#     блок кода
# else:
#     if условие2:
#         блок кода
#     else:
#         if условие3:
#             блок кода
#         ...

# В предыдущем уроке мы разбирали задачу об определении координатной четверти точки.
# Программу можно переписать с использованием вложенного оператора:

x = int(input())
y = int(input())
if x > 0:
    if y > 0:
        print('Первая четверть')
    else:
        print('Четвертая четверть')
else:
    if y > 0:
        print('Вторая четверть')
    else:
        print('Третья четверть')

# В данном случае уровень вложенности равен двум, так что программа одинаково хорошо читается как с помощью
# использования логического оператора and, так и с помощью вложенного оператора.

# Рассмотрим программу, которая переводит стобалльную оценку в пятибалльную.
# Для её реализации нужно воспользоваться вложенным условным оператором:

grade = int(input('Введите вашу отметку по 100-балльной системе: '))

if grade >= 90:
    print(5)
else:
    if grade >= 80:
        print(4)
    else:
        if grade >= 70:
            print(3)
        else:
            if grade >= 60:
                print(2)
            else:
                print(1)
# В этом примере уровень вложенности настолько глубок, что код становится трудно понять.

# Выбор из нескольких альтернатив – это обычное дело, здесь имеет смысл избегать глубокого вложения. Для этого
# в Python есть каскадный условный оператор.

# Мы не могли написать 5 независимых if-ов, поскольку в таком случае было бы напечатано сразу
# несколько значений пятибалльной оценки.

# Каскадный условный оператор
# Если требуется проверить несколько условий, в языке Python используется каскадный условный оператор.
#
# Синтаксис каскадного условного оператора имеет следующий вид:

# if условие1:
#     блок кода
# elif условие2:
#     блок кода
# ...
# else:
#     блок кода

# При исполнении такого условного оператора сначала проверяется условие 1. Если оно является истинным,
# то исполняется блок кода, который следует сразу после него, вплоть до выражения elif.
# Остальная часть конструкции игнорируется. Однако если условие 1 является ложным, то программа перескакивает
# непосредственно к следующему выражению elif и проверяет условие 2. Если оно истинное, то исполняется блок кода,
# который следует сразу после него, вплоть до следующего выражения elif. И остальная часть условного оператора тогда
# игнорируется. Этот процесс продолжается до тех пор, пока не будет найдено условие, которое является истинным,
# либо пока больше не останется выражений elif. Если ни одно условие не является истинным,
# то исполняется блок кода после выражения else.

# Приведенный ниже фрагмент кода является примером каскадного условного оператораif-elif-else.
# Этот фрагмент кода работает так же, как предыдущий код, использующий вложенный условный оператор.

grade = int(input('Введите вашу отметку: '))

if grade >= 90:
    print(5)
elif grade >= 80:
    print(4)
elif grade >= 70:
    print(3)
elif grade >= 60:
    print(2)
else:
    print(1)

# Обратите внимание на выравнивание и выделение отступом, которые применены в инструкции if-elif-else:
# выражения if, elif и else выравнены и исполняемые по условию блоки выделены отступом.

# Инструкция if-elif-else не является обязательной, потому что ее логика может быть запрограммирована вложенными
# инструкциями if-else. Однако длинная серия вложенных инструкций if-else имеет два характерных недостатка:

# программный код может стать сложным и трудным для восприятия;
# из-за необходимого выделения отступом продолжительная серия вложенных инструкций if-else может стать слишком длинной,
# чтобы целиком уместиться на экране монитора без горизонтальной прокрутки.
# Логика инструкции if-elif-else обычно прослеживается легче, чем длинная серия вложенных инструкций if-else.
# И поскольку в инструкции if-elif-else все выражения выровнены, длина строк в данной инструкции, как правило, короче.
#
# Запомни. Заключительный блок else в операторе if-elif-else является необязательным.

# Решение задач

# Задача 1. Даны три целых числа. Определите, сколько среди них совпадающих. Программа должна вывести одно из чисел:
# 3 (если все совпадают), 2 (если два совпадает) или 0 (если все числа различны).

# Решение. Программа, решающая поставленную задачу, может иметь следующий вид:

# 1 способ. Использование вложенного условного оператора.

a, b, c = int(input()), int(input()), int(input())

if a == b:
    if b == c:
        print(3)
    else:
        print(2)
else:
    if a == c:
        print(2)
    else:
        if b == c:
            print(2)
        else:
            print(0)

# 2 способ. Использование каскадного условного оператора.
a, b, c = int(input()), int(input()), int(input())

if a == b == c:
    print(3)
elif a == b:
    print(2)
elif b == c:
    print(2)
elif a == c:
    print(2)
else:
    print(0)

# 3 способ. Использование каскадного условного оператора и логического оператора or.
a, b, c = int(input()), int(input()), int(input())

if a == b == c:
    print(3)
elif a == b or b == c or a == c:
    print(2)
else:
    print(0)

# Гонка спидстеров

# Зум бросил вызов Флэшу и предложил ему честный поединок в виде гонки вокруг магнетара.
# В случае проигрыша эта нейтронная звезда зарядится и уничтожит мир, поэтому
# Флэш решил не рисковать без причины и узнать у своего друга Циско Рамона,
# есть ли смысл принимать вызов. Циско получил данные,
# что скорость Зума равна n, а скорость Флэша равна k.

# Напишите программу, которая должна вывести ответ Циско на вопрос Флэша.
#
# Формат входных данных
# На вход программе подаётся два целых числа n и k – скорости Зума и Флэша.
#
# Формат выходных данных
# Если Зум быстрее Флэша, нужно вывести «NO», а если Флэш быстрее Зума, нужно вывести «YES».
# В случае же если их скорости равны, нужно вывести "Don't know".

n = int(input())  # скорость зума
k = int(input())  # скорость флеша

if n > k:
    print('NO')
elif n < k:
    print('YES')
else:
    print("Don't know")
# Sample Input 1:
#
# 2204
# 1505
# Sample Output 1:
#
# NO
# Sample Input 2:
#
# 2344
# 4324
# Sample Output 2:
#
# YES
# Sample Input 3:
#
# 2500
# 2500
# Sample Output 3:
#
# Don't know

# Вид треугольника
# Напишите программу, которая принимает три положительных числа и определяет вид треугольника,
# длины сторон которого равны введенным числам.

# Формат входных данных
# На вход программе подаются три числа – длины сторон существующего треугольника.
#
# Формат выходных данных
# Программа должна вывести на экран текст – вид треугольника («Равносторонний», «Равнобедренный» или «Разносторонний»).

a, b, c = int(input()), int(input()), int(input())
if a != b and a != c and c != b:
    print('Разносторонний')
elif a == b == c:
    print('Равносторонний')
else:
    print('Равнобедренный')
# Sample Input 1:
#
# 145
# 145
# 139
# Sample Output 1:
#
# Равнобедренный
# Sample Input 2:
#
# 59
# 59
# 59
# Sample Output 2:
#
# Равносторонний
# Sample Input 3:
#
# 890
# 199
# 700
# Sample Output 3:
#
# Разносторонний

# Среднее число
# Даны три различных целых числа. Напишите программу, которая находит среднее по величине число.
# Формат входных данных
# На вход программе подаётся три различных целых числа, каждое на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести среднее по величине число.
#
# Примечание. Средним называется число, которое будет вторым, если три числа отсортировать в порядке возрастания.

num1, num2, num3 = int(input()), int(input()), int(input())
if num1 <= num2 <= num3 or num3 <= num2 <= num1:
    print(num2)
elif num2 <= num1 <= num3 or num3 <= num1 <= num2:
    print(num1)
elif num2 <= num3 <= num1 or num1 <= num3 <= num2:
    print(num3)
# Sample Input 1:
#
# 1
# 2
# 3
# Sample Output 1:
#
# 2
# Sample Input 2:
#
# 10
# 30
# 20
# Sample Output 2:
#
# 20
# Sample Input 3:
#
# 67
# 100
# 54
# Sample Output 3:
#
# 67
# Sample Input 4:
#
# 54
# 34
# 33
# Sample Output 4:
#
# 34

# Количество дней
# Дан порядковый номер месяца (1,2, ... , 12). Напишите программу,
# которая выводит на экран количество дней в этом месяце.
# Принять, что год является невисокосным.

# Примечание. Постарайтесь написать программу так, чтобы в ней было не более трех условий.
#
# Формат входных данных
# На вход программе подаётся одно целое число – порядковый номер месяца.
#
# Формат выходных данных
# Программа должна вывести количество дней в этом месяце.

month = int(input())

if month == 2:
    print(28)
elif month == 4 or month == 6 or month == 9 or month == 11:
    print(30)
else:
    print(31)
# Sample Input 1:
#
# 12
# Sample Output 1:
#
# 31
# Sample Input 2:
#
# 5
# Sample Output 2:
#
# 31
# Sample Input 3:
#
# 2
# Sample Output 3:
#
# 28

# Церемония взвешивания
# Известен вес боксера-любителя (целое число). Известно, что вес таков, что боксер может быть отнесён к одной из
# трех весовых категорий:
# Легкий вес – до 60 кг (невключительно);
# Первый полусредний вес – до 64 кг (невключительно);
# Полусредний вес – до 69 кг (невключительно).

# Напишите программу, определяющую, в какой категории будет выступать данный боксер.

# Формат входных данных
# На вход программе подаётся одно целое число.
#
# Формат выходных данных
# Программа должна вывести текст – название весовой категории.

weighing = int(input())  # взвешивание

if weighing < 60:
    print('Легкий вес')
elif 60 <= weighing < 64:
    print('Первый полусредний вес')
else:
    print('Полусредний вес')
# Sample Input 1:
#
# 55
# Sample Output 1:
#
# Легкий вес
# Sample Input 2:
#
# 68
# Sample Output 2:
#
# Полусредний вес
# Sample Input 3:
#
# 60
# Sample Output 3:
#
# Первый полусредний вес

# Самописный калькулятор 🌶️
# Напишите программу, которая считывает с клавиатуры два целых числа и строку.
# Если эта строка является обозначением одной из четырёх математических операций (+, -, *, /),
# то выведите результат применения этой операции к введённым ранее числам,
# в противном случае выведите «Неверная операция» (без кавычек). Если пользователь захочет поделить на ноль,
# выведите текст «На ноль делить нельзя!» (без кавычек).

# Формат входных данных
# На вход программе подаются два целых числа и строка, всё на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести результат применения операции к введенным числам или соответствующий текст,
# если операция неверная либо если происходит деление на ноль.

num1 = int(input())
num2 = int(input())
operation = input()

if operation == '+':
    print(num1 + num2)
elif operation == '-':
    print(num1 - num2)
elif operation == '*':
    print(num1 * num2)
elif operation == '/' and num2 != 0:
    print(num1 / num2)
elif operation == '/' and num2 == 0:
    print('На ноль делить нельзя!')
else:
    print('Неверная операция')
# Sample Input 1:
#
# 6104
# 0
# /
# Sample Output 1:
#
# На ноль делить нельзя!
# Sample Input 2:
#
# 25
# 5
# *
# Sample Output 2:
#
# 125
# Sample Input 3:
#
# 89
# 80
# -
# Sample Output 3:
#
# 9
# Sample Input 4:
#
# 567
# 433
# +
# Sample Output 4:
#
# 1000

# Цветовой микшер 🌶️
# Красный, синий и желтый называются основными цветами, потому что их нельзя получить путем смешения других цветов.
# При смешивании двух основных цветов получается вторичный цвет:
# если смешать красный и синий, то получится фиолетовый;
# если смешать красный и желтый, то получится оранжевый;
# если смешать синий и желтый, то получится зеленый.

# Напишите программу, которая считывает названия двух основных цветов для смешивания.
# Если пользователь вводит что-нибудь помимо названий «красный», «синий» или «желтый»,
# то программа должна вывести сообщение об ошибке. В противном случае программа должна
# вывести название вторичного цвета, который получится в результате.

# Формат входных данных
# На вход программе подаются две строки, каждая на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести полученный цвет смешения либо сообщение «ошибка цвета», если введён был не цвет.
#
# Примечание 1. Если смешать красный и красный, то получится красный и т.д.
#
# Примечание 2. Поиграйтесь с настоящим цветовым микшером 🙂

a, b = input(), input()

if a == 'красный' and b == 'синий' or a == 'синий' and b == 'красный':
    print('фиолетовый')
elif a == 'красный' and b == 'желтый' or a == 'желтый' and b == 'красный':
    print('оранжевый')
elif a == 'синий' and b == 'желтый' or a == 'желтый' and b == 'синий':
    print('зеленый')
elif (a == 'синий' or a == 'красный' or a == 'желтый') and a == b:
    print(a)
else:
    print('ошибка цвета')
# Sample Input 1:
#
# красный
# синий
# Sample Output 1:
#
# фиолетовый
# Sample Input 2:
#
# красный
# блаблабла
# Sample Output 2:
#
# ошибка цвета

# Цвета колеса рулетки 🌶️
# На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:

# карман 0 зеленый;
# для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
# для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.

# Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым,
# красным или черным. Программа должна вывести сообщение об ошибке, если пользователь вводит число,
# которое лежит вне диапазона от  0 до  36

# Формат входных данных
# На вход программе подаётся одно целое число.
#
# Формат выходных данных
# Программа должна вывести цвет кармана либо сообщение «ошибка ввода»,
# если введённое число лежит вне диапазона от  0 до  36.

roulette_wheel = int(input())  # колесо рулетки

if 1 <= roulette_wheel <= 10:
    if roulette_wheel % 2 != 0:
        print('красный')
    else:
        print('черный')
elif 11 <= roulette_wheel <= 18:
    if roulette_wheel % 2 != 0:
        print('черный')
    else:
        print('красный')
elif 19 <= roulette_wheel <= 28:
    if roulette_wheel % 2 != 0:
        print('красный')
    else:
        print('черный')
elif 29 <= roulette_wheel <= 36:
    if roulette_wheel % 2 != 0:
        print('черный')
    else:
        print('красный')
elif roulette_wheel == 0:
    print('зеленый')
else:
    print('ошибка ввода')


# Sample Input 1:
#
# 0
# Sample Output 1:
#
# зеленый
# Sample Input 2:
#
# 1
# Sample Output 2:
#
# красный
# Sample Input 3:
#
# 37
# Sample Output 3:
#
# ошибка ввода

# Пересечение отрезков 🌶️🌶️
# На числовой прямой даны два отрезка: [a1:b1] и [a2:b2]. Напишите программу, которая находит их пересечение.
# Пересечением двух отрезков может быть:
#
# отрезок;
# точка;
# пустое множество.

# Формат входных данных
# На вход программе подаются 4 целых числа a1, b1, a2, b2 каждое на отдельной строке.
# Гарантируется, что a1 < b1 и a2 < b2.

# Формат выходных данных
# Программа должна вывести на экран границы отрезка, являющегося пересечением, либо общую точку,
# либо текст «пустое множество».

# Не рассматривайте все случаи буквально. Если отрезок
# [a2:b2] левее (хотя бы своим левым концом) отрезка
# [a1:b1], то поменяйте отрезки местами. Дальше вы работаете только со случаями, где отрезок
# [a1:b1] гарантированно левее отрезка [a2:b2].

def intersection(a1, b1, a2, b2):
    """
  Находит пересечение двух отрезков.

  Args:
    a1: Левая граница первого отрезка.
    b1: Правая граница первого отрезка.
    a2: Левая граница второго отрезка.
    b2: Правая граница второго отрезка.

  Returns:
    Пересечение отрезков в виде кортежа (левая граница, правая граница).
  """

    if a1 > b1:
        a1, b1 = b1, a1
    if a2 > b2:
        a2, b2 = b2, a2

    # Если один из отрезков пуст, то пересечение пустое.

    if a1 > b2 or a2 > b1:
        return ()

    # Если один из отрезков полностью содержит другой, то пересечение совпадает с этим отрезком.

    if a1 <= a2 and b1 >= b2:
        return a1, b2
    if a2 <= a1 and b2 >= b1:
        return a2, b1

    # В противном случае пересечение представляет собой отрезок.

    return max(a1, a2), min(b1, b2)


print(intersection(1, 5, 2, 6))  # (2, 5)
print(intersection(1, 5, 6, 7))  # ()
print(intersection(1, 5, 1, 5))  # (1, 5)

# dasda
