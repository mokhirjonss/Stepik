# 9.4 Методы строк. Часть 2

# Тема урока: строки

# Методы строк
# Решение задач

# Аннотация. Строковый тип данных, основные методы поиска и замены.

# Поиск и замена

# Методы поиска и замены строк внутри других строк.
#
# Каждый метод в этой группе поддерживает необязательные аргументы <start> и <end>. Как и в строковых срезах действие
# метода ограничено частью исходной строки, начинающейся с позиции символа <start> и продолжающейся вплоть
# до позиции символа <end>, но не включающей ее. Если параметр <start> указан, а параметр <end> нет, то метод
# применяется к части исходной строки от <start> до конца строки. Если параметры не заданы, то подразумевается,
# что <start> = 0 , <end> = len(s).

# Метод count()

# Метод count(<sub>, <start>, <end>) считает количество непересекающихся вхождений подстроки <sub> в исходную строку s.

# Результатом выполнения следующего кода:

s = 'foo goo moo'
print(s.count('oo'))
print(s.count('oo', 0, 8))  # подсчет с 0 по 7 символ

# будет:
# 3
# 2

# Метод startswith()

# Метод startswith(<suffix>, <start>, <end>) определяет начинается ли исходная строка s подстрокой <suffix>.
# Если исходная строка начинается с подстроки <suffix>,метод возвращает значение True, а если нет, то  False.

# Результатом выполнения следующего кода:

s = 'foobar'
print(s.startswith('foo'))
print(s.startswith('baz'))
# будет:

# True
# False

# Метод endswith()

# Метод endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>.
# Метод возвращает значение True если исходная строка оканчивается на подстроку <suffix> и False в противном случае.

# Результатом выполнения следующего кода:

s = 'foobar'
print(s.endswith('bar'))
print(s.endswith('baz'))
# будет:

# True
# False

# Методы find(), rfind()

# Метод find(<sub>, <start>, <end>) находит индекс первого вхождения подстроки <sub> в исходной строке s.
# Если строка s не содержит подстроки <sub>, то метод возвращает значение -1. Мы можем использовать данный метод
# наравне с оператором in для проверки: содержит ли заданная строка некоторую подстроку или нет.

# Результатом выполнения следующего кода:
s = 'foo bar foo baz foo qux'
print(s.find('foo'))
print(s.find('bar'))
print(s.find('qu'))
print(s.find('python'))
# будет:
# 0
# 4
# 20
# -1

# Метод rfind(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением,
# что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

# Методы index(), rindex()

# Метод index(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением,
# что он вызывает ошибку  ValueError: substring not found во время выполнения программы,
# если подстрока <sub> не найдена.

# Метод rindex(<sub>, <start>, <end>) идентичен методу index(<sub>, <start>, <end>), за тем исключением, что он ищет
# первое вхождение подстроки <sub> начиная с конца строки s.

# Методы find() и rfind() являются более безопасными чем index() и rindex(), так как не приводят к возникновению
# ошибки во время выполнения программы.

# Метод strip()

# Метод strip() возвращает копию строки s у которой удалены все пробелы стоящие в начале и конце строки.

# Результатом выполнения следующего кода:
s = '     foo bar foo baz foo qux      '
print(s.strip())
# будет:
# foo bar foo baz foo qux

# Метод lstrip()

# Метод lstrip() возвращает копию строки s у которой удалены все пробелы стоящие в начале строки.

# Результатом выполнения следующего кода:

s = '     foo bar foo baz foo qux      '
print(s.lstrip())
# будет:
# foo bar foo baz foo qux

# Метод rstrip()
# Метод rstrip() возвращает копию строки s у которой удалены все пробелы стоящие в конце строки.

# Результатом выполнения следующего кода:
s = '      foo bar foo baz foo qux      '
print(s.rstrip())
# будет:
#       foo bar foo baz foo qux

# Методы strip(), lstrip(), rstrip() могут принимать на вход опциональный аргумент<chars>.
# Необязательный аргумент <chars>– это строка, которая определяет набор символов для удаления.

# Метод replace()

# Метод replace(<old>, <new>) возвращает копию s со всеми вхождениями подстроки <old>, замененными на <new>.

# Результатом выполнения следующего кода:
s = 'foo bar foo baz foo qux'
print(s.replace('foo', 'grault'))
# будет:
# grault bar grault baz grault qux

# Метод replace() может принимать опциональный третий аргумент <count>,  который определяет количество замен.

# Результатом выполнения следующего кода:
s = 'foo bar foo baz foo qux'
print(s.replace('foo', 'grault', 2))
# будет:
# grault bar grault baz foo qux

# Что покажет приведенный ниже фрагмент кода?
s = 'aabbAAccDDaa'
s = s.lower()
print(s.count('a'))
# 6

# Что покажет приведенный ниже фрагмент кода?
s = 'www.stepik.org'
print(s.startswith('www'))
# True

# Что покажет приведенный ниже фрагмент кода?
s = 'www.stepik.org'
print(s.endswith('.ru'))
# False

# Что покажет приведенный ниже фрагмент кода?
s = 'I learn Python language. Python - awesome!'
print(s.find('Python'))
# 8

# Что покажет приведенный ниже фрагмент кода?
s = '     I learn Python language               '
print(s.strip())
# I learn Python language

# Что покажет приведенный ниже фрагмент кода?
s = 'abcdababa'
print(s.replace('ab', '123'))
# 123cd123123a

# Количество слов

# На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом. Напишите программу,
# которая подсчитывает количество слов в ней.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести количество слов.

# Примечание 1. Строка текста не содержит пробелов в начале и конце.

# Примечание 2. Используйте для решения задачи метод count.

text = input()
total = text.count(' ')
print(total + 1)
# Sample Input 1:
#
# Hello world
# Sample Output 1:
#
# 2
# Sample Input 2:
#
# Python
# Sample Output 2:
#
# 1
# Sample Input 3:
#
# In 2010, someone paid 10k Bitcoin for two pizzas.
# Sample Output 3:
#
# 9

# Минутка генетики

# На вход программе подается строка генетического кода, состоящая из
# букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин).
# Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в
# данную строку генетического кода.

# Формат входных данных
# На вход программе подается строка генетического кода, состоящая из символов А, Г, Ц, Т, а, г, ц, т.

# Формат выходных данных
# Программа должна вывести сколько гуанина, тимина, цитозина, аденина входит в данную строку генетического кода.

# Примечание. Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.

text = input().lower()
adenin = text.count('а')
guanin = text.count('г')
sitozin = text.count('ц')
timin = text.count('т')
print(f"Аденин: {adenin}\n"
      f"Гуанин: {guanin}\n"
      f"Цитозин: {sitozin}\n"
      f"Тимин: {timin}")
# Sample Input 1:
#
# АааГГЦЦцТТттт
# Sample Output 1:
#
# Аденин: 3
# Гуанин: 2
# Цитозин: 3
# Тимин: 5
# Sample Input 2:
#
# ааггццттААГГЦЦТТ
# Sample Output 2:
#
# Аденин: 4
# Гуанин: 4
# Цитозин: 4
# Тимин: 4

# Очень странные дела

# Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди.
# На приемник ему поступает n различных последовательностей кода Морзе. Декодировав их,
# он получает последовательности из цифр и букв строчного латинского алфавита.
# При этом только в сообщениях Оди содержится число 11, причем минимум 3 раза.
# Помогите определить Джиму количество сообщений от Оди.

# Формат входных данных
# В первой строке подаётся число n – количество сообщений, в последующих n строках вводятся строки,
# содержащие латинские строчные буквы и цифры.

# Формат выходных данных
# Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.

# Примечание. В сообщениях Оди числа 11 необязательно должны быть разделены другими символами,
# нужно подсчитать вхождения последовательности символов "11", т.е. например в строке "111" содержится одна такая
# последовательность, в то время как в "1111" их уже две.
total = 0
numbers = int(input())
for i in range(numbers):
      text = input()
      if text.count('11') >= 3:
            total += 1
print(total)
# Sample Input:
#
# 3
# 11helpme11jim11
# avengers141414atta11ck
# k1lg0re11111l
# Sample Output:
#
# 1

# Количество цифр

# На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести количество цифр в данной строке.
total = 0
text = input()
for i in range(len(text)):
      if text[i] in '1234567890':
            total += 1
print(total)

text = input()
cnt = 0

for i in range(10):
    cnt += text.count(str(i))

print(cnt)

# Sample Input 1:
#
# nezabud dl-6
# Sample Output 1:
#
# 1
# Sample Input 2:
#
# l33t 3301
# Sample Output 2:
#
# 6

# .com or .ru

# На вход программе подается строка текста. Напишите программу, которая проверяет,
# что строка заканчивается подстрокой .com или .ru.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.

text = input()
if text.endswith('.com') or text.endswith('.ru'):
      print('YES')
else:
      print('NO')
# Sample Input 1:
#
# www.stepik.org
# Sample Output 1:
#
# NO
# Sample Input 2:
#
# www.google.com
# Sample Output 2:
#
# YES
# Sample Input 3:
#
# www.yandex.ru
# Sample Output 3:
#
# YES

# Самый частотный символ

# На вход программе подается строка текста. Напишите программу, которая выводит на экран символ,
# который появляется наиболее часто.

# Формат входных данных
# На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского
# алфавита, а также цифры.

# Формат выходных данных
# Программа должна вывести символ, который появляется наиболее часто.

# Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.

# Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.

text = input()
maxs = 0
total = 0
for i in text:
      if text.count(i) >= maxs:
            maxs = text.count(i)
            total = i
print(total)

s = input()

most_common = s[0]
for el in s:
      if s.count(el) >= s.count(most_common):
            most_common = el

print(most_common)

# Sample Input 1:
#
# aaaabbc
# Sample Output 1:
#
# a
# Sample Input 2:
#
# abaabbcccc
# Sample Output 2:
#
# c

# Первое и последнее вхождение

# На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз,
# выведите её индекс. Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на
# одной строке, разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
if 'f' in text and text.count('f') > 1:
      print(text.find('f'), text.rfind('f'))
elif 'f' in text and text.count('f') == 1:
      print(text.find('f'))
else:
      print('NO')

s = input()
cnt = s.count("f")

if cnt == 0:
    print("NO")
elif cnt == 1:
    print(s.index("f"))
else:
    print(s.index("f"), s.rindex("f"))
# Sample Input 1:
#
# abcdefg
# Sample Output 1:
#
# 5
# Sample Input 2:
#
# abcdefgfhfabc
# Sample Output 2:
#
# 5 9
# Sample Input 3:
#
# abcd
# Sample Output 3:
#
# NO

# Удаление фрагмента

# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. Напишите программу,
# которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
first = text.find('h')
last = text.rfind('h')
print(text[:first] + text[last + 1:])
# Sample Input 1:
#
# ahahahahaha
# Sample Output 1:
#
# aa
# Sample Input 2:
#
# hh
# Sample Output 2:



