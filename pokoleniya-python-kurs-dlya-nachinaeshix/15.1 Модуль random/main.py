# 15.1 Модуль random

# Тема урока: модуль random

# Случайные числа
# Модуль random

# Аннотация. Урок посвящен модулю random, который содержит функции по работе со случайными числами.

# Случайные числа

# Случайные числа широко используются в различных задачах программирования:

# случайные числа используются в играх. Например, компьютерным играм, которые позволяют игроку подбрасывать игральный
# кубик, нужны случайные числа для представления значений кубика. Программы, которые раскрывают игральные карты,
# вынимаемые из перетасованной колоды, используют случайные числа для представления достоинства карт;

# случайные числа применяются в программах имитационного моделирования. В некоторых симуляциях компьютер должен
# случайным образом решить, как будет вести себя человек, животное, насекомое или другое живое существо.
# Нередко конструируются формулы, где случайное число используется для определения различных вариантов действий и
# событий, происходящих в программе;

# случайные числа распространены в статистических программах, случайным образом отбирающих данные для анализа;

# случайные числа используются в компьютерной безопасности для шифрования уязвимых данных.

# Python предлагает встроенные функции для работы со случайными числами. Эти функции хранятся в модуле random в
# стандартной библиотеке.

# Модуль random

# Модуль random предоставляет функции для генерации случайных чисел, букв и случайного выбора элементов
# последовательности (списка, строки и т.д.).

# Для использования этих функций в начале программы необходимо подключить модуль, что делается командой import:
# import random

# После подключения модуля мы можем использовать его функции.

# Функция randint()

# Функция randint() принимает два обязательных аргумента a и b и возвращает случайное целое число из отрезка [a;b].

# Следующий код выводит два случайных целых числа: num1 из отрезка [0; 17] и num2 из отрезка [-5; 5] .

import random

num1 = random.randint(0, 17)
num2 = random.randint(-5, 5)

print(num1)
print(num2)
# 7
# 2

# 13
# -2

# Важно: левая и правая граница a и b включаются в диапазон генерируемых случайных чисел. Результатом вызова функции random.randint(2, 9) может быть любое число от 2 до 9 включительно.

# Следующий код выводит 10 случайных целых чисел из диапазона [1;100]:

import random

for _ in range(10):
    print(random.randint(1, 100))
# 40
# 24
# 36
# 59
# 19
# 97
# 61
# 58
# 86
# 34

# 27
# 9
# 27
# 91
# 77
# 88
# 48
# 17
# 50
# 89

# Среди этих чисел возможны повторения, поскольку каждый раз выбирается случайное.

# Функция randrange()

# Если вы помните, как применять функцию range(), то почувствуете себя непринужденно с функцией randrange().
# Функция randrange() принимает такие же аргументы, что и функция range(). Различие состоит в том,
# что функция randrange() не возвращает саму последовательность чисел. Вместо этого она возвращает случайно выбранное
# число из последовательности чисел.

# Следующий код присваивает переменной num случайное число в диапазоне от 0 до 9:

import random

num = random.randrange(10)
print(num)
# 8

# 2

# Аргумент 10 задает конечный предел последовательности значений. Функция возвратит случайно выбранное число из
# последовательности чисел от 0 до конечного предела, исключая сам предел.

# Следующий код задает начальное значение и конечный предел последовательности:
import random

num = random.randrange(5, 10)
print(num)
# 9

# 7

# Таким образом в переменной num будет храниться случайное число в диапазоне от 5 до 9.

# Следующий код задает начальное значение, конечный предел и величину шага:
import random

num = random.randrange(0, 101, 10)
print(num)
# 90

# 40

# Таким образом в переменной num будет храниться случайное число из последовательности чисел:
# 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100.

# Функция random()

# Функции randint() и randrange() возвращают случайное целое число. А вот функция random() возвращает случайное число с
# плавающей точкой (вещественное число). В функцию random() никаких аргументов не передается. Функция random()
# возвращает случайное число с плавающей точкой в диапазоне от 0.0 до 1.0 (исключая 1.0).

# Следующий код выводит случайное число с плавающей точкой из диапазона [0.0;1.0):
import random

num = random.random()
print(num)
# 0.6550692759930519

# 0.7034632087710674

# 0.5431981930955702

# Функция uniform()

# Функция uniform() тоже возвращает случайное число с плавающей точкой, но при этом она позволяет задавать диапазон
# для отбора значений.

# Следующий код выводит случайное число с плавающей точкой из диапазона [1.5;17.3]:
import random

num = random.uniform(1.5, 17.3)
print(num)
# 6.4017183341392645

# 14.614922997580424

# 8.402680225843364

# Начальные значения случайного числа

# Числа, генерируемые функциями модуля random, не являются подлинно случайными. Несмотря на то, что обычно их называют
# случайными числами, это псевдослучайные числа, вычисляемые на основе формулы. Формула, генерирующая случайные числа,
# должна быть инициализирована начальным значением. Оно используется в вычислении, возвращающем следующее случайное
# число в ряду. Когда модуль random импортируется, он получает системное время из внутреннего генератора тактовых
# импульсов компьютера и использует его как начальное значение. Системное время - целое число, представляющее текущую
# дату и время вплоть до одной сотой секунды. Если бы всегда использовалось одно и то же начальное значение,
# функции генерации случайных чисел всегда  возвращали бы один и тот же ряд псевдослучайных чисел. Поскольку системное
# время меняется каждую сотую долю секунды, можно без опасений утверждать, что всякий раз, когда импортируется модуль
# random, будет сгенерирована отличающаяся от предыдущих последовательность случайных чисел.

# Вместе с тем, могут иметься некоторые программы, где требуется всегда генерировать одну и ту же последовательность
# случайных чисел. При необходимости для этого можно вызвать функцию seed(), задав начальное значение.

# Следующий код генерирует 10 случайных чисел, и при этом содержит инструкцию, явно устанавливающую начальное значение
# для генератора случайных чисел:
import random

random.seed(17)  # явно устанавливаем начальное значение для генератора случайных чисел

for _ in range(10):
    print(random.randint(1, 100))
# Результатом выполнения такого кода может быть:

# 67
# 54
# 39
# 47
# 38
# 23
# 99
# 91
# 91
# 70

# Если выполнить такой код еще раз, то мы получим ту же самую последовательность псевдослучайных чисел.

# Примечания

# Примечание 1. Подключение модуля следующим образом:
from random import *
# позволяет в дальнейшем не писать название модуля и символ точки при вызове функций модуля.

# Примечание 2. Функции модуля random на самом деле являются методами одноименного класса random.

# Примечание 3. Функция randint() реализована на основе функции randrange() следующим образом:
# # Return random integer in range [a, b], including both end points.
def randint(self, a, b):
    return self.randrange(a, b + 1)

# Решение задач

# Задача 1. Профессор Тимур преподает вводный курс статистики и попросил вас написать программу, которую он мог бы
# использовать на занятиях для имитации бросания игральных кубиков. Программа должна случайным образом генерировать два
# числа в диапазоне от 1 до 6 и показывать их.

# Решение. Для генерации целых чисел мы будем использовать функцию randint():

import random

print('Бросаем кубики...')
print('Значения граней: ')
print(random.randint(1, 6))
print(random.randint(1, 6))
# Бросаем кубики...
# Значения граней:
# 6
# 3

# Бросаем кубики...
# Значения граней:
# 4
# 4

# Задача 2. В интервью с профессором Тимуром вы выясняете, что он хотел бы использовать программу для имитации
# нескольких поочередных бросаний кубика.

# Решение. Будем использовать цикл while, который имитирует один бросок кубиков и затем спрашивает пользователя,
# следует ли сделать еще один бросок. Цикл будет повторяться до тех пор, пока пользователь отвечает "да",
# набирая букву "д":

import random

again = 'д'
while again.lower() == 'д':
    print('Бросаем кубики...')
    print('Значения граней:')
    print(random.randint(1, 6))
    print(random.randint(1, 6))
    again = input('Бросить кубики ещё раз? (д = да, н = нет): ')
# Бросаем кубики...
# Значения граней:
# 1
# 1
# Бросить кубики ещё раз? (д = да, н = нет): д
# Бросаем кубики...
# Значения граней:
# 2
# 4
# Бросить кубики ещё раз? (д = да, н = нет): д
# Бросаем кубики...
# Значения граней:
# 6
# 4
# Бросить кубики ещё раз? (д = да, н = нет): н

# Задача 3. Профессор Тимур был так доволен написанным вами симулятором бросания кубиков, что попросил вас разработать
# еще одну программу. Он хотел бы иметь симулятор десятикратного поочередного подбрасывания монеты. Всякий раз, когда
# программа имитирует подбрасывание монеты, она должна случайным образом показывать "орла" или "решку".

# Решение. Мы можем сымитировать бросание монеты путем генерации случайного числа в диапазоне от 0 до 1. Для генерации
# целых чисел мы будем использовать функцию randint():

import random

for _ in range(10):
    num = random.randint(0, 1)
    if num == 0:
        print('Орел')
    else:
        print('Решка')
# Орел
# Решка
# Решка
# Решка
# Решка
# Решка
# Орел
# Орел
# Орел
# Орел

# Какая функция возвращает случайное целое число внутри заданного диапазона значений?
# randint()

# Какая функция возвращает случайное число с плавающей точкой в диапазоне от 0.0 до 1.0 (исключая 1.0)?
# random()

# Какая функция возвращает случайное число с плавающей точкой внутри заданного диапазона значений?
# uniform()

# Какое число может быть в переменной num после выполнения следующего кода:
import random

num = random.randint(1, 118)
print(num)
# 20

# Какое число может быть в переменной num после выполнения следующего кода:
import random

num = random.randrange(115)
print(num)
# 112

# Какое число может быть в переменной num после выполнения следующего кода:
import random

num = random.randrange(9, 81)
print(num)
# 77

# Какое число может быть в переменной num после выполнения следующего кода:
import random

num = random.randrange(15, 50, 5)
print(num)
# 35

# Функция shuffle()

# Функция shuffle() принимает список в качестве обязательного аргумента и перемешивает его случайным образом.

# Следующий код перемешивает список numbers случайным образом, а затем выводит его содержимое:
import random

numbers = [1, 2, 3, 4, 5, 6, 7, 8]
random.shuffle(numbers)
print(numbers)
# Результатом работы такого кода может быть:
# [8, 7, 2, 6, 1, 5, 3, 4]

# Функция choice()

# Функция choice() принимает список (строку) в качестве обязательного аргумента и возвращает один случайный элемент из
# переданного списка (строки).

# Следующий код выводит по одному случайному элементу из строки 'BEEGEEK' и списков [1, 2, 3, 4], ['a', 'b', 'c', 'd']:
import random

print(random.choice('BEEGEEK'))
print(random.choice([1, 2, 3, 4]))
print(random.choice(['a', 'b', 'c', 'd']))
# Результатом работы такого кода может быть:
# B
# 4
# b

# Функция sample()
# Функция sample() принимает два обязательных аргумента: список (строку) и количество случайных элементов, а возвращает
# список случайных элементов в указанном количестве.

# Результатом работы кода:
import random

numbers = [2, 5, 8, 9, 12]

print(random.sample(numbers, 1))
print(random.sample(numbers, 2))
print(random.sample(numbers, 3))
print(random.sample(numbers, 5))
# может быть:
# [9]
# [12, 8]
# [2, 9, 5]
# [12, 2, 8, 5, 9]

# Количество случайных элементов не должно превышать длину начального списка (строки). Следующий код:
# import random
#
# numbers = [2, 5, 8, 9, 12]
#
# print(random.sample(numbers, 6))
# приведет к ошибке:
# ValueError: Sample larger than population or is negative

# Примечания
# Примечание. Подробнее о модуле random можно почитать тут.

# Установите соответствие между функцией и тем, что она делает.

# shuffle() - перемешивает содержимое списка
# choice() - возвращает ровно один элемент списка или строки
# sample() - возвращает несколько элементов списка или строки

# Какое число может быть в переменной num после выполнения следующего кода:
import random

numbers = [1, 2, 3, 5, 7]

num = random.choice(numbers)
print(num)
# 5

# Какое число может быть в переменной num после выполнения следующего кода:
import random

numbers = list(range(2, 10, 2)) + [3]

num = random.choice(numbers)
print(num)
# 6

# После выполнения следующего кода в переменной rand_numbers может храниться список:
import random
numbers = [1, 2, 4, 6, 7, 9]

rand_numbers = random.sample(numbers, 3)
print(rand_numbers)
# [7, 1, 6]

