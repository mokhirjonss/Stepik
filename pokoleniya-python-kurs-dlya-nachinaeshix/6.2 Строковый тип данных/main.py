# 6.2 Строковый тип данных

# Тема урока: строковый тип данных

# Строковый тип данных str
# Функции len() и str()
# Конкатенация строк
# Умножение строки на число
# Оператор in
# Решение задач

# Аннотация. Поговорим о строковом типе данных и научимся использовать встроенные функции len(), str(),
# а также работать с операторами +, *, in.

# Строковый тип данных

# Строковый тип данных, как и числовой, очень часто используется в программировании.
# В Python строковый тип данных имеет название str (сокращение от string — струна, ряд).

# Для создания строковой переменной (литерала), мы должны заключить необходимый текст в кавычки.
# В Python можно использовать как одинарные кавычки, так и двойные:

s1 = 'Python rocks!'
s2 = "Python rocks!"

# Напомним, что по умолчанию, команда input() считывает именно строку текста:
s = input()  # переменная s имеет строковый тип str

# Для задания пустой строки, мы используем две кавычки одинакового типа:

s3 = ''  # пустая строка
s4 = ' '  # строка состоящая из одного символа пробела

# Не стоит путать пустую строку и строку состоящую из одного символа пробела. Это абсолютно разные строки.

# Длина строки

# Длиной строки называется количество символов из которых она состоит.
# Чтобы посчитать длину строки используем встроенную функцию len() (от слова length – длина).

# Следующий программный код:

s5 = 'abcdef'
length1 = len(s1)  # считаем длину строки из переменной s1
length2 = len('Python rocks!')  # считаем длину строкового литерала
print(length1)
print(length2)

# выведет:
# 6
# 13

# При подсчете длины строки считаются все символы, включая пробелы.

# Преобразование чисел в строку

# Для преобразования строки к числу мы использовали функции int() и float().
# Для обратного преобразования, то есть из числа в строку мы используем функцию str():

# Рассмотрим следующий программный код:

num1 = 1777  # целое число
num2 = 17.77  # число с плавающей точкой
s6 = str(num1)  # преобразовали целое число в строку '1777'
s7 = str(num2)  # преобразовали число с плавающей точкой в строку '17.77'

# Иногда работать со строками намного проще, чем с числами. Даже если в условии задачи сказано, что дается число,
# нам ничто не мешает работать с ним как со строкой.

# Конкатенация строк

# Строки, как и числа, можно складывать. Операция сложения строк называется конкатенацией или сцеплением.

# Рассмотрим следующий программный код:

s8 = 'ab' + 'bc'
s9 = 'bc' + 'ab'
s10 = s8 + s9 + '!!'
print(s8)
print(s9)
print(s10)

# Результатом выполнения такого кода будет:
# abbc
# bcab
# abbcbcab!!

# Операция сложения строк в отличие от операции сложения чисел не является коммутативной, то есть, от перестановки мест
# слагаемых-строк результат меняется!

# С помощью конкатенации строк можно эмулировать вывод данных, который раньше мы делали используя необязательные
# параметры sep и end. Следующие две строки кода делают одно и то же:

print('a', 'b', 'c', sep='*', end='!')
print()  # переход на новую строку
print('a' + '*' + 'b' + '*' + 'c' + '!')

# Результатом выполнения такого кода будет:

# a*b*c!
# a*b*c!

# Умножение строки на число

# В Python также можно умножать строку на число. Такой оператор повторяет строку указанное количество раз.

# Рассмотрим следующий программный код:

s11 = 'Hi' * 4
print(s11)

# Результатом выполнения такого кода будет:

# HiHiHiHi

# Оператор умножения строки на число (repetition) очень удобен на практике. Например, мы хотим распечатать строку
# состоящую из 75 символов -. Мы можем это сделать с помощью кода:

print('-' * 75)
# Результатом выполнения такого кода будет:

# ---------------------------------------------------------------------------

# Строку можно умножать на число, но нельзя умножать на строку.

# Примечания

# Примечание 1. Тройные кавычки в Python используются для многострочного (multiline) текста. Например,
text = '''Python is an interpreted, high-level, general-purpose programming language.
Created by Guido van Rossum and first released in 1991, Python design 
philosophy emphasizes code readability with its notable use of significant whitespace.'''

# Примечание 2. На первый взгляд может показаться странным, что можно использовать как одинарные, так и двойные кавычки,
# однако такой подход позволяет очень легко добавлять в строку нужные кавычки:

s12 = 'Мы можем использовать в одиночных кавычках двойные кавычки "Война и мир"'
s13 = "Мы можем использовать в двойных кавычках одиночные кавычки 'Война и мир'"
print(s12)
print(s13)

# Результатом выполнения такого кода будет:

# Мы можем использовать в одиночных кавычках двойные кавычки "Война и мир"
# Мы можем использовать в двойных кавычках одиночные кавычки 'Война и мир'

# Что покажет приведенный ниже фрагмент кода?

mystr = 'да'
mystr = mystr + 'нет'
mystr = mystr + 'да'
print(mystr)
# данетда

# Что покажет приведенный ниже фрагмент кода?
str1 = '1'
str2 = str1 + '2' + str1
str3 = str2 + '3' + str2
str4 = str3 + '4' + str3
print(str4)
# 121312141213121

# Что покажет приведенный ниже фрагмент кода?
mystr = '123' * 3 + '456' * 2 + '789' * 1
print(mystr)
# 123123123456456789

# Напишите программу, которая выводит текст:
# "Python is a great language!", said Fred. "I don't ever remember having this much fun before."

# Примечание. Используйте конкатенацию строк.
print('''"Python is a great language!", said Fred. "I don't ever remember having this much fun before."''')
# "Python is a great language!", said Fred. "I don't ever remember having this much fun before."

# What's Your Name?

# Напишите программу, которая считывает с клавиатуры две строки – имя и фамилию пользователя и выводит фразу:
#
# «Hello [введенное имя] [введенная фамилия]! You have just delved into Python».

# Формат входных данных
# На вход программе подаётся две строки (имя и фамилия), каждая на отдельной строке.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Между firstname lastname вставьте пробел =)

name = input()
surname = input()
print(f"Hello {name} {surname}! You have just delved into Python")
# Sample Input 1:
#
# Anthony
# Joshua
# Sample Output 1:
#
# Hello Anthony Joshua! You have just delved into Python
# Sample Input 2:
#
# Michael
# Jordan
# Sample Output 2:
#
# Hello Michael Jordan! You have just delved into Python
# Sample Input 3:
#
# Leonardo
# DiCaprio
# Sample Output 3:
#
# Hello Leonardo DiCaprio! You have just delved into Python

# Футбольная команда

# Напишите программу, которая считывает с клавиатуры название футбольной команды и выводит фразу:

# «Футбольная команда [введённая строка] имеет длину [длина введённой строки] символов».

# Формат входных данных
# На вход программе подаётся строка – название футбольной команды.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

title = input()
length_title = len(title)
print(f"Футбольная команда {title} имеет длину {length_title} символов")
# Sample Input 1:
#
# Barcelona
# Sample Output 1:
#
# Футбольная команда Barcelona имеет длину 9 символов
# Sample Input 2:
#
# Real Madrid
# Sample Output 2:
#
# Футбольная команда Real Madrid имеет длину 11 символов
# Sample Input 3:
#
# Manchester United
# Sample Output 3:
#
# Футбольная команда Manchester United имеет длину 17 символов
# Sample Input 4:
#
# Milan
# Sample Output 4:
#
# Футбольная команда Milan имеет длину 5 символов

# Три города

# Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.

# Формат входных данных
# На вход программе подаётся названия трех городов, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.

# Примечание. Гарантируется, что длины названий всех трех городов различны.

city1, city2, city3 = input(), input(), input()
min1 = min(len(city1), len(city2), len(city3))
max1 = max(len(city1), len(city2), len(city3))
if min1 == len(city1):
    print(city1)
elif min1 == len(city2):
    print(city2)
elif min1 == len(city3):
    print(city3)

if max1 == len(city1):
    print(city1)
elif max1 == len(city2):
    print(city2)
elif max1 == len(city3):
    print(city3)
# Sample Input 1:
#
# Москва
# Санкт-Петербург
# Екатеринбург
# Sample Output 1:
#
# Москва
# Санкт-Петербург
# Sample Input 2:
#
# Нью-Йорк
# Вашингтон
# Чикаго
# Sample Output 2:
#
# Чикаго
# Вашингтон
# Sample Input 3:
#
# Париж
# Марсель
# Лион
# Sample Output 3:
#
# Лион
# Марсель

# Арифметические строки

# Вводятся
# 3
# 3 строки в случайном порядке. Напишите программу, которая выясняет,
# можно ли из длин этих строк построить арифметическую прогрессию.

# Формат входных данных
# На вход программе подаются три строки, каждая на отдельной строке.

# Формат выходных данных
# Программа должна вывести строку «YES»,
# если из длин введенных слов можно построить арифметическую прогрессию, или «NO» - в противном случае.

# Примечание. Почитать про арифметическую прогрессию можно по ссылке.

a, b, c = len(input()), len(input()), len(input())
if (2 * b - c - a) * (2 * c - b - a) * (2 * a - b - c) == 0:
    print('YES')
else:
    print('NO')
# Sample Input 1:
#
# abc
# a
# abcde
# Sample Output 1:
#
# YES
# Sample Input 2:
#
# 2434
# 90099
# 21
# Sample Output 2:
#
# NO
# Sample Input 3:
#
# aaaaaaaaaa10
# 1111111Nm
# 22222r
# Sample Output 3:
#
# YES

# Оператор in
# В Python есть специальный оператор in, который позволяет проверить, что одна строка находится внутри другой.

# Рассмотрим следующий код:
s = input()
if 'a' in s:
    print('Введенная строка содержит символ а')
else:
    print('Введенная строка не содержит символ а')
# Такой код проверяет, содержится ли в переменной s символ a и выводит соответствующий текст.

# Мы можем использовать оператор in вместе с логическим оператором not. Например
s = input()
if '.' not in s:
    print('Введенная строка не содержит символа точки')
# С помощью оператора in мы можем упростить следующий код, проверяющий,
# что в переменной s находится один из 5 символов a, e, i, o, u:
if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':
    print('YES')
# до вида:
if len(s) == 1 and s in 'aeiou':
    print('YES')
# Примечания
# Примечание. Если строка s1 содержится в строке s2, то говорят, что строка s1 является подстрокой для строки s2.
# Другими словами, оператор in определяет является ли одна строка подстрокой другой.

# Какие значения может принимать строковая переменная s, чтобы в результате выполнения кода было выведено слово «YES»?
if s in 'abc123abc':
    print('YES')
else:
    print('NO')
# s = '23'
#
# s = '1'
#
# s = '123abc'
#
# s = '3ab'
#
# s = 'a'

# Цвет настроения синий
# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если во введенной строке есть подстрока «синий» и «NO» - в противном случае.

# Формат входных данных
# На вход программе подается одна строка.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Учитывайте регистр при поиске подстроки «синий».

text = input()
if 'синий' in text:
    print('YES')
else:
    print('NO')
# Sample Input 1:
#
# Какой хороший день!
# Sample Output 1:
#
# NO
# Sample Input 2:
#
# Как называется этот красивый синий камень в Вашем кольце?
# Sample Output 2:
#
# YES
# Sample Input 3:
#
# Разглядите синий густой цвет.
# Sample Output 3:
#
# YES

# Отдыхаем ли?
# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введённой строке есть подстрока «суббота» или «воскресенье», и «NO» в противном случае.

# Формат входных данных
# На вход программе подается одна строка.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
if 'суббота' in text or 'воскресенье' in text:
    print('YES')
else:
    print('NO')
# Sample Input 1:
#
# Какой сегодня день недели?
# Sample Output 1:
#
# NO
# Sample Input 2:
#
# Была суббота, и ему хотелось поскорее уехать домой.
# Sample Output 2:
#
# YES
# Sample Input 3:
#
# День в воскресенье выдался тёплым и солнечным.
# Sample Output 3:
#
# YES

# Корректный email

# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки. Напишите программу
# проверяющую корректность email адреса.

# Формат входных данных
# На вход программе подаётся одна строка – email адрес.

# Формат выходных данных
# Программа должна вывести строку «YES», если email адрес является корректным и «NO» в ином случае.

# Примечание. Наличие символов @ и . недостаточно для корректности email адреса,
# однако их отсутствие гарантировано влечёт за собой неверный email.

title_email = input()
if '@' in title_email and '.' in title_email:
    print('YES')
else:
    print('NO')
# Sample Input 1:
#
# aaaa@bbb.com
# Sample Output 1:
#
# YES
# Sample Input 2:
#
# aaaa@bbbcom
# Sample Output 2:
#
# NO
# Sample Input 3:
#
# qwerty.com
# Sample Output 3:
#
# NO




