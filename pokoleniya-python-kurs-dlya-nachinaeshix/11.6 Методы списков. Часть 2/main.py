# 11.6 Методы списков. Часть 2

# Тема урока: методы списков

# Метод insert()
# Метод index()
# Метод remove()
# Метод pop()
# Метод reverse()
# Метод count()
# Метод clear()
# Метод copy()
# Метод sort()

# Аннотация. Другие методы списков.

# Мы уже познакомились с двумя списочными методами append() и extend(). Первый добавляет в конец списка один
# новый элемент, а второй расширяет список другим списком. К спискам в Python применимы и другие удобные методы,
# с которыми мы познакомимся в этом уроке.

# Метод insert()

# Метод insert() позволяет вставлять значение в список в заданной позиции. В него передается два аргумента:

# index: индекс, задающий место вставки значения;
# value: значение, которое требуется вставить.

# Когда значение вставляется в список, список расширяется в размере, чтобы разместить новое значение.
# Значение, которое ранее находилось в заданной индексной позиции,
# и все элементы после него сдвигаются на одну позицию к концу списка.

# Следующий программный код:
names = ['Gvido', 'Roman', 'Timur']
print(names)
# ['Gvido', 'Roman', 'Timur']
names.insert(0, 'Anders')
print(names)
# ['Anders', 'Gvido', 'Roman', 'Timur']
names.insert(3, 'Josef')
print(names)
# ['Anders', 'Gvido', 'Roman', 'Josef', 'Timur']

# ['Gvido', 'Roman' , 'Timur']
# ['Anders', 'Gvido', 'Roman' , 'Timur']
# ['Anders', 'Gvido', 'Roman' , 'Josef', 'Timur']

# При указании недопустимого индекса во время выполнения программы ошибки не происходит.
# Если задан индекс за пределами конца списка, то значение будет добавлено в конец списка.
# Если применен отрицательный индекс, который указывает на недопустимую позицию,
# то значение будет вставлено в начало списка.

# Метод index()

# Метод index() возвращает индекс первого элемента, значение которого равняется переданному в метод значению.
# Таким образом, в метод передается один параметр:

# value: значение, индекс которого требуется найти.

# Если элемент в списке не найден, то во время выполнения происходит ошибка.

# Следующий программный код:

names = ['Gvido', 'Roman', 'Timur']
position = names.index('Timur')
print(position)
# 2
# выведет: 2

# Следующий программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# position = names.index('Anders')
# print(position)
# приводит к ошибке:
# ValueError: 'Anders' is not in list

# Чтобы избежать таких ошибок, можно использовать метод index() вместе с оператором принадлежности in:
names = ['Gvido', 'Roman', 'Timur']
if 'Anders' in names:
    position = names.index('Anders')
    print(position)
else:
    print('Такого значение нет в списке')
# Такого значение нет в списке

# Метод remove()
# Метод remove() удаляет первый элемент, значение которого равняется переданному в метод значению.
# В метод передается один параметр:

# value: значение, которое требуется удалить.

# Метод уменьшает размер списка на один элемент. Все элементы после удаленного элемента смещаются на одну позицию
# к началу списка. Если элемент в списке не найден, то во время выполнения происходит ошибка.

# Следующий программный код:
food = ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
print(food)
food.remove('Рис')
print(food)

# выведет:

# ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
# ['Курица', 'Рыба', 'Брокколи', 'Рис']

# Важно: метод remove() удаляет только первый элемент с указанным значением. Все последующие его вхождения остаются в
# списке. Чтобы удалить все вхождения нужно использовать цикл while в связке с
# оператором принадлежности in и методом remove.

# Метод pop()

# Метод pop() удаляет элемент по указанному индексу и возвращает его. В метод pop()
# передается один необязательный аргумент:

# index: индекс элемента, который требуется удалить.

# Если индекс не указан, то метод удаляет и возвращает последний элемент списка.
# Если список пуст или указан индекс за пределами диапазона, то во время выполнения происходит ошибка.

# Следующий программный код:
names = ['Gvido', 'Roman', 'Timur']
item = names.pop(1)
print(item)
print(names)
# выведет:
# Roman
# ['Gvido', 'Timur']

# Метод count()
# Метод count() возвращает количество элементов в списке, значения которых равны переданному в метод параметру.

# Таким образом, в метод передается один параметр:
# value: значение, количество вхождений которого нужно посчитать.

# Если значение в списке не найдено, то метод возвращает 0.

# Следующий программный код:
names = ['Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur']

cnt1 = names.count('Timur')
cnt2 = names.count('Gvido')
cnt3 = names.count('Josef')

print(cnt1)
print(cnt2)
print(cnt3)

# выведет:

# 3
# 1
# 0

# Метод reverse()

# Метод reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный.

# Следующий программный код:
names = ['Gvido', 'Roman' , 'Timur']
names.reverse()
print(names)

# выведет:

# ['Timur', 'Roman', 'Gvido']

# Существует большая разница между вызовом метода names.reverse() и использованием среза names[::-1]. Метод reverse()
# меняет порядок элементов на обратный в текущем списке, а срез создает копию списка, в котором элементы следуют
# в обратном порядке.

# Метод clear()

# Метод clear() удаляет все элементы из списка.

# Следующий программный код:
names = ['Gvido', 'Roman' , 'Timur']
names.clear()
print(names)
# выведет:
# []

# Метод copy()

# Метод copy() создает поверхностную копию списка.

# Следующий программный код:
names = ['Gvido', 'Roman', 'Timur']
names_copy = names.copy()  # создаем поверхностную копию списка names

print(names)
print(names_copy)

# выведет:

# ['Gvido', 'Roman', 'Timur']
# ['Gvido', 'Roman', 'Timur']

# Аналогичного результата можно достичь с помощью срезов или функции list():
names = ['Gvido', 'Roman', 'Timur']
names_copy1 = list(names)  # создаем поверхностную копию с помощью функции list()
names_copy2 = names[:]  # создаем поверхностную копию с помощью среза от начала до конца

# Подробнее про поверхностные копии мы поговорим в курсе для продвинутых.

# Примечания

# Примечание. Существует большая разница в работе строковых и списочных методов. Строковые методы не изменяют
# содержимого объекта, к которому они применяются, а возвращают новое значение. Списочные методы (кроме методов index(),
# count(), copy()) напротив, меняют содержимое объекта, к которому применяются.

# Например, когда мы применяем метод lower() к строке original_string, то создаётся новая строка lowercase_string,
# которая не имеет ничего общего со строкой original_string. Более точно будет сказать, что строковый метод вернул
# новую строку, не изменяя старую:

original_string = "HELLO WORLD"
lowercase_string = original_string.lower()  # тут возвращается новая, модифицированная строка

print(original_string)  # HELLO WORLD
print(lowercase_string)  # hello world

# Как мы видим, сама строка original_string не изменилась. Мы просто использовали её для создания строки
# lowercase_string через метод lower(). А lower lowercase_string действительно создана на основе строки original_string,
# где каждый символ в нижнем регистре.

# Совершенно иная ситуация возникает при работе со списками. Например, при добавлении элемента в список через метод
# append() мы изменяем наш список, не создавая новый. Именно поэтому использование метода append() ничего не возвращает.
original_list = [1, 2, 4, 7]
modified_list = original_list.append(666)  # тут ничего не возвращается

print(original_list)  # [1, 2, 4, 7, 666]
print(modified_list)  # None

# Как мы видим, original_list изменился.
# Элемент 666 был добавлен в конец. А вот наша попытка присвоить списку modified_list метод append()
# не увенчалась успехом.
# Был возвращён объект None (подробнее этот объект будет рассмотрен в курсе для продвинутых).
# Вкратце, объект None используется для обозначения отсутствия значения или буквально "ничего", т.е. пустоты.

# Установите соответствие между списочным методом и тем, что он выполняет.
# insert()  вставляет заданное значение в список
# index()  возвращает индекс первого вхождения заданного значения
# reverse()  меняет порядок следования элементов на противоположный
# count()  возвращает количество равных заданному значению элементов
# clear()  удаляет все элементы из списка
# find()  у списков такой метод отсутствует 😂
# remove()  удаляет первое вхождение заданного значения

# Что будет выведено в результате выполнения следующего программного кода?
colors = ['Orange']
colors.append('Red')
colors.append('Blue')
colors.append('Green')
colors.insert(0, 'Violet')
colors.insert(2, 'Purple')

print(colors)
# ['Violet', 'Orange', 'Purple', 'Red', 'Blue', 'Green']

# Что будет выведено в результате выполнения следующего программного кода?
colors = ['Red', 'Blue', 'Green', 'Black', 'White']
del colors[-1]
colors.remove('Green')

print(colors)
# ['Red', 'Blue', 'Black']

# Все сразу 2 🌶️

# Дополните приведенный код, чтобы он:

# Заменил второй элемент списка на 17;
# Добавил числа 4, 5 и 6 в конец списка;
# Удалил первый элемент списка;
# Удвоил список;
# Вставил число 25 по индексу 3;
# Вывел список, с помощью функции print()

numbers = [8, 9, 10, 11]
numbers[1] = 17
numbers.extend([4, 5, 6])
del numbers[0]
numbers *= 2
numbers.insert(3, 25)
print(numbers)
# [17, 10, 11, 25, 4, 5, 6, 17, 10, 11, 4, 5, 6]

# Переставить min и max
# На вход программе подается строка текста, содержащая различные натуральные числа. Из данной строки формируется список
# чисел. Напишите программу, которая меняет местами минимальный и максимальный элемент этого списка.

# Формат входных данных
# На вход программе подается строка текста, содержащая различные натуральные числа, разделенные символом пробела.

# Формат выходных данных
# Программа должна вывести строку текста в соответствии с условием задачи.

# Примечание. Используйте подходящие встроенные функции и списочные методы.
text_numbers = []
text_numbers1 = input().split()
for i in text_numbers1:
    text_numbers.append(int(i))
maxx = max(text_numbers)
minn = min(text_numbers)
position_max = text_numbers.index(maxx)
position_min = text_numbers.index(minn)
text_numbers.pop(position_max)
text_numbers.insert(position_max, minn)
text_numbers.pop(position_min)
text_numbers.insert(position_min, maxx)
print(*text_numbers)

seq = []
for el in input().split():
    seq.append(int(el))

mx_ind = seq.index(max(seq))
mn_ind = seq.index(min(seq))
seq[mx_ind], seq[mn_ind] = seq[mn_ind], seq[mx_ind]

print(*seq)
# Sample Input 1:
#
# 3 4 5 2 1
# Sample Output 1:
#
# 3 4 1 2 5
# Sample Input 2:
#
# 10 9 8 7 6 5 4 3 2 1
# Sample Output 2:
#
# 1 9 8 7 6 5 4 3 2 10
# Sample Input 3:
#
# 1 2
# Sample Output 3:
#
# 2 1
# Sample Input 4:
#
# 1
# Sample Output 4:
#
# 1

# Количество артиклей

# На вход программе подается строка, содержащая английский текст. Напишите программу, которая подсчитывает общее
# количество артиклей: 'a', 'an', 'the'.

# Формат входных данных
# На вход программе подается строка, содержащая английский текст. Слова текста разделены символом пробела.

# Формат выходных данных
# Программа должна вывести общее количество артиклей 'a', 'an', 'the' вместе с поясняющим текстом.

# Примечание. Артикли могут начинаться с заглавной буквы 'A', 'An', 'The'.
total = 0
text = input().lower().split()
total += text.count('a') + text.count('an') + text.count('the')
print(f"Общее количество артиклей: {total}")
# Sample Input:
#
# William Shakespeare was born in the town of Stratford, England, in the year 1564. When he was a young man,
# Shakespeare moved to the city of London, where he began writing plays. His plays were soon very successful, and were
# enjoyed both by the common people of London and also by the rich and famous. In addition to his plays, Shakespeare
# wrote many short poems and a few longer poems. Like his plays, these poems are still famous today.
# Sample Output:
#
# Общее количество артиклей: 7

# Взлом Братства Стали 🌶️
# Немалоизвестный в пустошах Мохаве Курьер забрел в Хидден-Вэли – секретный бункер Братства Стали и любезно соглашается
# помочь им в решении их проблем. Одной из такой проблем являлся странный компьютерный вирус, который проявлялся в виде
# появления комментариев к программам на терминалах Братства Стали. Известно, что программисты Братства никогда не
# оставляют комментарии к коду и пишут программы на Python, поэтому удаление всех этих комментариев никак не навредит
# им. Помогите писцу Ибсену удалить все комментарии из программы.

# Формат входных данных
# На первой строке вводится символ решётки и сразу же натуральное число n — количество строк в программе,
# не считая первой.
# Далее следует n строк кода.

# Формат выходных данных
# Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк.
# Пустую строку вместо первой строки ввода выводить не надо.

# Примечание. Обращайте внимание на лишние пробелы в конце строк. Проверяющая система не пропустит ваше решение с ними.
n = input()
for _ in range(int(n[1:])):
    s = input()
    if '#' in s:
        s = s[:s.find('#')]
    print(s.rstrip())
# Sample Input:
#
# #12
# print("Введите своё имя")
# name = input()
# print("Введите пароль, если имеется")    # ахахахах вам не поймать меня
# password = input()
# if password == "hoover":
#     print("Здравствуйте, рыцарь", name)         #долой Макнамару
# elif password == "noncr":
#     print("Здравствуйте, паладин", name)
# elif password == "gelios":
#     print("Здравствуйте, старейшина", name)          #Элайджа вперёд
# else:
#     print("Здравствуйте, послушник", name)
# Sample Output:
#
# print("Введите своё имя")
# name = input()
# print("Введите пароль, если имеется")
# password = input()
# if password == "hoover":
#     print("Здравствуйте, рыцарь", name)
# elif password == "noncr":
#     print("Здравствуйте, паладин", name)
# elif password == "gelios":
#     print("Здравствуйте, старейшина", name)
# else:
#     print("Здравствуйте, послушник", name)

# Метод sort()
# В Python списки имеют встроенный метод sort(), который сортирует элементы списка по возрастанию или убыванию.

# Следующий программный код:
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort()
print('Отсортированный список:', a)
# выведет:
# Отсортированный список: [-67, -3, -2, 0, 1, 6, 7, 8, 9, 12, 34, 45, 99, 1000]

# По умолчанию метод sort() сортирует список по возрастанию. Если требуется отсортировать список по убыванию,
# необходимо явно указать параметр reverse = True.

# Следующий программный код:
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort(reverse=True)  # сортируем по убыванию
print('Отсортированный список:', a)

# выведет:
# Отсортированный список: [1000, 99, 45, 34, 12, 9, 8, 7, 6, 1, 0, -2, -3, -67]

# Примечания

# Примечание 1. С помощью метода sort() можно сортировать списки содержащие не только числа, но и строки.
# В таком случае элементы списка сортируются в соответствии с лексикографическим порядком.

# Следующий программный код:
a = ['бета', 'альфа', 'дельта', 'гамма']
a.sort()
print('Отсортированный список:', a)

# выведет:
# Отсортированный список: ['альфа', 'бета', 'гамма', 'дельта']

# Примечание 2. Метод sort() использует алгоритм Timsort.

# Что будет выведено в результате выполнения следующего программного кода?
numbers = [4, 2, 8, 6, 5, 3, 10, 4, 100, 1, -7]
numbers.sort()
del numbers[0]
del numbers[-1]
numbers.sort(reverse=True)
print(numbers)
# [10, 8, 6, 5, 4, 4, 3, 2, 1]

# Сортировка чисел

# На вход программе подается строка текста, содержащая целые числа. Из данной строки формируется список чисел.
# Напишите программу, которая сортирует и выводит данный список сначала по возрастанию, а затем по убыванию.

# Формат входных данных
# На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

# Формат выходных данных
# Программа должна вывести две строки текста в соответствии с условием задачи.
total = []
numbers = input().split()
for i in numbers:
    total.append(int(i))
total.sort()
print(*total)
total.sort(reverse=True)
print(*total)
# Sample Input:
#
# 4 5 1 2 3 8
# Sample Output:
#
# 1 2 3 4 5 8
# 8 5 4 3 2 1



