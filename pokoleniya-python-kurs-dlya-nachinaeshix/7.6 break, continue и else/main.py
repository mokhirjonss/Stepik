# 7.6 break, continue и else

# Тема урока: break, continue, else

# Оператор break;
# Оператор continue;
# Бесконечные циклы;
# Ключевое слово else в циклах;
# Решение задач.

# Аннотация. Урок посвящен операторам break и continue, а также необязательному блоку else.

# Оператор прерывания цикла break

# Иногда бывает нужно прервать выполнение цикла преждевременно. Оператор break прерывает ближайший цикл for или while.

# Усовершенствуем с помощью оператора break программу, проверяющую число на простоту,:

num = int(input())
flag = True

for i in range(2, num):
    if num % i == 0:  # если исходное число делится на какое-либо отличное от 1 и самого себя
        flag = False
        break  # останавливаем цикл если встретили делитель числа

if flag:  # эквивалентно if flag == True:
    print('Число простое')
else:
    print('Число составное')

# Как только мы встречаем делитель отличный от 1 и num, мы меняем значение сигнальной метки и прерываем цикл,
# поскольку дальнейшее его выполнение лишено смысла: число гарантированно не является простым.

# Оператор прерывания цикла break позволяет ускорять программы, так как мы избавляемся от лишних итераций.

# Напишем программу, использующую цикл for, которая считывает 10 чисел и суммирует их до тех пор,
# пока не обнаружит отрицательное число. В этом случае выполнение цикла прерывается командой break:
result = 0
for i in range(10):
    num = int(input())
    if num < 0:
        break
    result += num
print(result)

# Оператор прерывания цикла break удобен в связке с сигнальными метками: когда после проверки некоторого условия
# нам нет смысла продолжать выполнение цикла.

# Напишем программу, которая определяет, содержит ли введенное пользователем число цифру 7.

num = int(input())
number = num
flag = False
while num != 0:
    last_digit = num % 10
    if last_digit == 7:
        flag = True
        break  # прерываем цикл, так как число гарантированно содержит цифру 7
    num //= 10

if flag:  # эквивалентно if flag == True:
    print('Число', number, 'содержит цифру 7')
else:
    print('Число', number, 'не содержит цифру 7')

# Как только мы встретили цифру 7, мы меняем значение сигнальной метки и прерываем цикл с помощью оператора break.
# Мы можем и не прерывать цикл преждевременно, а дождаться его естественного завершения (условие num != 0,
# то есть все цифры числа обработаны), однако в таком случае мы будем совершать лишнюю работу, и в случае,
# если число очень большое, программа будет работать медленнее.

# Бесконечные циклы
# В предыдущих уроках мы говорили о цикле, который не имеет возможности завершиться и назвали его бесконечным циклом.
# Самый простой способ создать бесконечный цикл в Python – записать следующий код:
while True:
    print('Python is awesome!')

# Результатом выполнения такого кода будет бесконечное количество строчек текста:

# Python is awesome!
# Python is awesome!
# .
# .
# .
# Python is awesome!
# Python is awesome!
# Python is awesome!

# Бесконечный цикл продолжает повторяться до тех пор, пока программа не будет прервана. Изучив оператор break,
# мы получили механизм прерывания бесконечных циклов.

# Возможно, вам может показаться, что бесконечные циклы лишены смысла, однако это не совсем так.
# Например, вы можете написать программу, которая запускается и работает, постоянно принимая запросы на обслуживание.
# Программный код такой программы может выглядеть так:
while True:
    query = get_new_query()  # получаем новый запрос на обработку
    query.process()  # обрабатываем запрос

# Иногда с помощью бесконечного цикла удается сделать программный код более читабельным. Более простым может быть
# завершение цикла на основе условий внутри тела цикла, а не на основе условий в его заголовке:

# while True:
#     if условие 1:  # условие для остановки цикла
#         break
#     ...
#     if условие 2:  # еще одно условие для остановки цикла
#         break
#     ...
#     if условие 3:  # еще одно условие для остановки цикла
#         break

# В подобных случаях, когда существует множество причин завершения цикла,
# часто их проще выделить из нескольких разных мест, чем пытаться указать все условия завершения в заголовке цикла.

# Важно: бесконечные циклы могут быть очень полезными. Просто помните, что вы должны убедиться,
# что цикл в какой-то момент будет прерван, чтобы он действительно не становился бесконечным.

# Оператор continue
# Другая стандартная идиома циклов — пропуск отдельных элементов при переборе. Оператор continue позволяет
# перейти к следующей итерации цикла for или while до завершения всех команд в теле цикла.

# Напишем программу, которая выводит все числа от 1 до 100, кроме чисел 7, 17, 29 и 78.
for i in range(1, 101):
    if i == 7 or i == 17 or i == 29 or i == 78:
        continue  # переходим на следующую итерацию
    print(i)

# Примечания

# Примечание 1. Оператор break прерывает выполнение ближайшего цикла, а не программы,
# то есть далее будет выполнена команда, следующая сразу за циклом.

# Примечание 2. Графическое представление операторов break и continue имеет вид:

# Что покажет приведенный ниже фрагмент кода?
for i in range(10):
    print(i, end="*")
    if i > 6:
        break
# 0*1*2*3*4*5*6*7*

# Что покажет приведенный ниже фрагмент кода?
i = 100
while i > 0:
    if i == 40:
        break
    print(i, end='*')
    i -= 20
# 100*80*60*

# Что покажет приведенный ниже фрагмент кода?
n = 10
while n > 0:
    n -= 1
    if n == 2:
        continue
    print(n, end='*')
# 9*8*7*6*5*4*3*1*0*

# Что покажет приведенный ниже фрагмент кода?
result = 0
for i in range(10):
    if i % 2 == 0:
        continue
    result += i
print(result)
# 25

# Что покажет приведенный ниже фрагмент кода?
mult = 1
for i in range(1, 11):
    if i % 2 == 0:
        continue
    if i % 9 == 0:
        break
    mult *= i
print(mult)
# 105

# Наименьший делитель
# На вход программе подается число n>1.
# Напишите программу, которая выводит его наименьший отличный от 1 делитель.

# Формат входных данных
# На вход программе подается одно натуральное число n.

# Формат выходных данных
# Программа должна вывести наименьший делитель отличный от 1.

# Примечание. Используйте оператор break при обнаружении делителя.

number = int(input())
for i in range(1, number + 1):
    if number % i == 0 and i > 1:
        break
    print(i)
# Sample Input 1:
#
# 15
# Sample Output 1:
#
# 3
# Sample Input 2:
#
# 17
# Sample Output 2:
#
# 17
# Sample Input 3:
#
# 67834658736534870
# Sample Output 3:
#
# 2

# Следуй правилам
# На вход программе подается натуральное число n.
# Напишите программу, которая выводит числа от 1 до n включительно за исключением:
# чисел от 5 до 9 включительно;
# чисел от 17 до 37 включительно;
# чисел от 78 до 87 включительно.

# Формат входных данных
# На вход программе подается одно натуральное число n.

# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.

# Примечание. Используйте оператор continue .

number = int(input())
for i in range(1, number + 1):
    if 5 <= i <= 9:
        continue
    elif 17 <= i <= 37:
        continue
    elif 78 <= i <= 87:
        continue
    print(i)
# Sample Input 1:
#
# 10
# Sample Output 1:
#
# 1
# 2
# 3
# 4
# 10
# Sample Input 2:
#
# 20
# Sample Output 2:
#
# 1
# 2
# 3
# 4
# 10
# 11
# 12
# 13
# 14
# 15
# 16
# Sample Input 3:
#
# 1
# Sample Output 3:
#
# 1

# Блок else в циклах
# Python допускает необязательный блок else в конце циклов while и for. Это уникальная особенность Python,
# не встречающаяся в большинстве других языков программирования. Синтаксис такой конструкции следующий:

# while условие:
#     блок кода1
# else:
#     блок кода2
#
# # или
#
# for i in range(10):
#     блок кода1
# else:
#     блок кода2

# Блок кода2, указанный в else, будет выполнен, когда штатным образом завершается цикл while или for.

# Сейчас вы можете подумать: «Как это может быть полезным?» Ведь мы можем сделать то же самое, поместив блок кода2
# сразу после цикла while или for без else:

# while условие:
#     блок кода1
# блок кода2
#
# # или
#
# for i in range(10):
#     блок кода1
# блок кода2

# В чем разница?

# Если слово else отсутствует в описании цикла, то блок кода2 будет выполняться после завершения цикла,
# несмотря ни на что. Если же слово else присутствует, то блок кода2 будет выполняться только в том случае,
# если цикл завершается штатным образом. Под штатным завершением цикла подразумевается его завершение без использования
# оператора прерывания break.

# Рассмотрим следующий программный код:
n = 5
while n > 0:
    n -= 1
    print(n)
else:
    print('Цикл завершен.')

# Данный цикл повторяется до тех пор, пока истинно условие n > 0. Поскольку цикл завершился штатным образом,
# то блок кода в инструкции else будет выполнен. Таким образом, результатом выполнения такой программы будут строки: 4

# 4
# 3
# 2
# 1
# 0
# Цикл завершен.

# Рассмотрим следующий программный код:
n = 5
while n > 0:
    n -= 1
    print(n)
    if n == 2:
        break
else:
    print('Цикл завершен.')

# Этот цикл преждевременно завершается с помощью оператора прерывания break, поэтому блок кода в инструкции else не
# будет выполнен. Результатом выполнения такой программы будут строки:

# 4
# 3
# 2

# Вам может показаться, что инструкция else в циклах while и for не совсем соответствует тому, что реально происходит.
# Гвидо ван Россум, создатель Python, сказал, что если бы он проектировал язык Python заново,
# то избавился бы от else в циклах.

# Напишем программу, которая определяет, содержит ли введенное пользователем число цифру 7.
# Вместо программного кода, написанного ранее:
num = int(input())
n = num
flag = False
while n != 0:
    last = n % 10
    if last == 7:
        flag = True
        break  # прерываем цикл, так как число гарантированно содержит цифру 7
    n //= 10

if flag is True:
    print('Число', num, 'содержит цифру 7')
else:
    print('Число', num, 'не содержит цифру 7')

# мы можем использовать:

num = int(input())
n = num
while n != 0:
    last = n % 10
    if last == 7:
        print('Число', num, 'содержит цифру 7')
        break
    n //= 10
else:
    print('Число', num, 'не содержит цифру 7')

# Примечания
# Примечание 1. Оператор continue не влияет на выполнение блока else в циклах.
# Примечание 2. Блок else в циклах часто применяется для обработки отсутствия элементов.
# Примечание 3. Блок кода else в циклах встречается не так часто на практике. Однако если вы обнаружите ситуацию,
# в которой применение else оправдано, то не стесняйтесь его использовать. Это может добавить ясности вашему коду!

# Будет ли выполнен блок кода else, в приведенном ниже фрагменте кода?

n = 0
while n < 10:
    n += 2
    print(n)
else:
    print('Цикл завершен.')
# да

# Будет ли выполнен блок кода else в приведенном ниже фрагменте кода?
n = 0
while n < 10:
    n += 2
    if n == 8:
        break
    print(n)
else:
    print('Цикл завершен.')
# нет

# Будет ли выполнен блок кода else, в приведенном ниже фрагменте кода?
n = 0
while n < 10:
    n += 2
    if n == 7:
        break
    print(n)
else:
    print('Цикл завершен.')
# да
