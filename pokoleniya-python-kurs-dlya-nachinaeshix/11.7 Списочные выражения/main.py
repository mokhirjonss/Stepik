# 11.7 Списочные выражения

# Тема урока: списочные выражения

# Списочные выражения
# Решение задач

# Аннотация. Списочные выражения. Создание списков без явного использования циклов и вызова списочного метода append().

# Создание списков

# Для того, чтобы создать список состоящий из 10 нулей мы можем использовать следующий код:
zeros = []
for i in range(10):
    zeros.append(0)
print(zeros)
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# В Python, однако есть более простой и компактный способ для создания такого списка. Мы можем использовать оператор
# умножения списка на число:
zeros = [0] * 10
print(zeros)
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Для создания списков, заполненных по более сложным правилам нам приходится явно использовать цикл for.

# Например, для создания списка целых чисел от 0 до 9, мы вынуждены писать такой код:
numbers = []
for i in range(10):
    numbers.append(i)
print(numbers)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# Такой код хоть и не является сложным, однако достаточно громоздок.

# Списочные выражения

# В Python есть механизм для создания списков из неповторяющихся элементов. Такой механизм называется — списочное
# выражение (list comprehension).

# Предыдущий код можно записать следующим образом:
numbers = [i for i in range(10)]
print(numbers)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# Общий вид списочного выражения следующий:
# [выражение for переменная in последовательность]

# где переменная — имя некоторой переменной, последовательность — последовательность значений, которые она принимает
# (список, строка или объект, полученный при помощи функции range), выражение — некоторое выражение, как правило,
# зависящее от использованной в списочном выражении переменной, которым будут заполнены элементы списка.

# Примеры использования списочных выражений

# 1. Создать список, заполненный 10 нулями можно и при помощи списочного выражения:
zeros = [0 for i in range(10)]
print(zeros)
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# 2. Создать список, заполненный квадратами целых чисел от 0 до 9 можно так:
squares = [i ** 2 for i in range(10)]
print(squares)
# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# 3. Создать список, заполненный кубами целых чисел от 10 до 20 можно так:
cubes = [i ** 3 for i in range(10, 21)]
print(cubes)
# [1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000]

# 4. Создать список, заполненный символами строки:
chars = [c for c in 'abcdefg']
print(chars)
# ['a', 'b', 'c', 'd', 'e', 'f', 'g']

# Считывание входных данных
# При решении многих задач из предыдущих уроков мы считывали начальные данные (строки, числа) и заполняли ими список.
# С помощью списочных выражений процесс заполнения списка можно заметно сократить.

# Например, если сначала вводится число n – количество строк, а затем сами строки, то создать список можно так:
n = int(input())
lines = [input() for _ in range(n)]
print(lines)
# 3
# a
# b
# c
# ['a', 'b', 'c']

# Можно опустить описание переменной n:
lines = [input() for _ in range(int(input()))]
print(lines)
# 2
# q
# w
# ['q', 'w']

# Если требуется считать список чисел, то необходимо добавить преобразование типов:
numbers = [int(input()) for _ in range(int(input()))]
print(numbers)
# 3
# 1
# 2
# 3
# [1, 2, 3]

# Обратите внимание, мы используем символ _ в качестве имени переменной цикла, поскольку она не используется.

# Списочные выражения часто используются для инициализации списков. В Python не принято создавать пустые списки,
# а затем заполнять их значениями, если можно этого избежать.

# Условия в списочном выражении

# В списочных выражениях можно использовать условный оператор. Например, если требуется создать список четных чисел
# от 0 до 20, то мы можем написать такой код:
evens = [i for i in range(21) if i % 2 == 0]
print(evens)
# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

# Важно: для того, чтобы получить список, состоящий из четных чисел, лучше использовать функцию range(0, 21, 2).
# Предыдущий пример приведен для демонстрации возможности использования условий в списочных выражениях.

# Вложенные циклы
# В списочном выражении можно использовать вложенные циклы.

# Следующий программный код:
numbers = [i * j for i in range(1, 5) for j in range(2)]
print(numbers)
# [0, 1, 0, 2, 0, 3, 0, 4]

# выведет список:
# [0, 1, 0, 2, 0, 3, 0, 4]

# Такой код равнозначен следующему:
numbers = []

for i in range(1, 5):
    for j in range(2):
        numbers.append(i * j)
print(numbers)
# [0, 1, 0, 2, 0, 3, 0, 4]

# Подводя итог

# Пусть
word = 'Hello'
numbers = [1, 14, 5, 9, 12]
words = ['one', 'two', 'three', 'four', 'five', 'six']
total = [0 for i in range(10)]
print(total)
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
total = [i ** 2 for i in range(1, 8)]
print(total)
# [1, 4, 9, 16, 25, 36, 49]
total = [i * 10 for i in numbers]
print(total)
# 10, 140, 50, 90, 120]
total = [c * 2 for c in word]
print(total)
# ['HH', 'ee', 'll', 'll', 'oo']
total = [m[0] for m in words]
print(total)
# ['o', 't', 't', 'f', 'f', 's']
total = [i for i in numbers if i < 10]
print(total)
# [1, 5, 9]
total = [m[0] for m in words if len(m) == 3]
print(total)
# ['o', 't', 's']

# Как записывается списочное выражение?
# [выражение for переменная in последовательность]

# Дополните приведенный код, используя списочное выражение так, чтобы получить новый список, содержащий строки
# исходного списка, где у каждой строки удалён первый символ.

keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

new_keywords = [i[1:] for i in keywords]

print(new_keywords)

# Дополните приведенный код, используя списочное выражение, так чтобы получить новый список,
# содержащий длины строк исходного списка.

keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

lengths = [len(i) for i in keywords]

print(lengths)

# Дополните приведенный код списочным выражением, чтобы получить новый список, содержащий только слова длиной не менее
# пяти символов (включительно).

keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

new_keywords = [i for i in keywords if len(i) >= 5]

print(new_keywords)

# Дополните приведенный код, используя списочное выражение, так чтобы получить список всех чисел-палиндромов
# от 100 до 1000 (включительно).

# Примечание. Результирующий список должен состоять из целых чисел.

palindromes = [i for i in range(100, 1001) if str(i)[0] == str(i)[-1]]

print(palindromes)

# Списочное выражение 1

# На вход программе подается натуральное число n.
# Напишите программу, использующую списочное выражение, которая создает список, содержащий квадраты чисел от 1 до n
# (включительно), а затем выводит его элементы построчно, то есть каждый на отдельной строке.

# Формат входных данных
# На вход программе подается натуральное число.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Для вывода элементов списка используйте цикл for.

numbers = [i ** 2 for i in range(1, int(input()) + 1)]
print(*numbers, sep='\n')
# Sample Input:
#
# 5
# Sample Output:
#
# 1
# 4
# 9
# 16
# 25

# Списочное выражение 2

# На вход программе подается строка текста, содержащая целые числа. Напишите программу, использующую списочное
# выражение, которая выведет кубы указанных чисел также на одной строке.

# Формат входных данных
# На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание 1. Для вывода элементов списка используйте цикл for.

# Примечание 2. Используйте метод split().
total = input().split()
numbers = [int(i) ** 3 for i in total]
print(*numbers)

seq = [int(el) for el in input().split()]
cubes = [el ** 3 for el in seq]

for el in cubes:
    print(el, end=" ")
# Sample Input 1:
#
# 2 4 3
# Sample Output 1:
#
# 8 64 27
# Sample Input 2:
#
# -2 -5 0
# Sample Output 2:
#
# -8 -125 0

# В одну строку 1

# На вход программе подается строка текста, содержащая слова. Напишите программу,
# которая выводит слова введенной строки в столбик.

# Формат входных данных
# На вход программе подается строка текста, содержащая слова, разделенные символом пробела.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Программу можно написать в одну строку кода.
text = input().split()
new_text = [i for i in text]
print(*new_text, sep='\n')

words = input().split()
print(*words, sep="\n")
# Sample Input:
#
# Умей ценить того кто без тебя не может
# Sample Output:
#
# Умей
# ценить
# того
# кто
# без
# тебя
# не
# может

# В одну строку 2

# На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая выводит все
# цифровые символы данной строки.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Программу можно написать в одну строку кода.

text = input()
numbers = [i for i in text if i.isdigit()]
print(*numbers, sep='')
# Sample Input 1:
#
# Число Pi примерно равно 3.1415
# Sample Output 1:
#
# 31415
# Sample Input 2:
#
# 123Python awesome!56
# Sample Output 2:
#
# 12356

# В одну строку 3

# На вход программе подается строка текста, содержащая целые числа. Напишите программу, использующую списочное
# выражение, которая выводит не оканчивающиеся на цифру 4 квадраты четных чисел.

# Формат входных данных
# На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание 1. Программу можно написать в одну строку кода.

# Примечание 2. На цифру 4 не должны оканчиваться именно квадраты чисел, а не сами числа.

text = input().split()
numbers = [int(i)**2 for i in text if (int(i) ** 2) % 10 != 4 and int(i) % 2 == 0]
print(*numbers)
# Sample Input 1:
#
# 1 2 3 4 5 6 7 8 9
# Sample Output 1:
#
# 16 36
# Sample Input 2:
#
# 4 4 10 6 4
# Sample Output 2:
#
# 16 16 100 36 16

