# 7.3 Частые сценарии
# Тема урока: частые сценарии

# Подсчет количества
# Вычисление суммы и произведения
# Обмен значений переменных
# Сигнальные метки
# Определение максимума и минимума
# Расширенные операторы присваивания (+=, -=, //= и т.д.)

# Аннотация. Рассмотрим частые сценарии при написании циклов.

# Подсчет количества

# Нередко нужно, чтобы наши программы подсчитывали, сколько раз что-либо произошло.
# К примеру, видеоигра может подсчитывать количество поворотов персонажа, или математическая программа может считать,
# как много чисел обладают некоторым свойством. Ключ к подсчету – использование переменной счетчика.

# Напишем программу, которая считывает 10 чисел и определяет, сколько из них больше 10.
counter = 0
for _ in range(10):
    num = int(input())
    if num > 10:
        counter = counter + 1

print('Было введено', counter, 'чисел, больших 10.')

# Каждый раз, когда мы считываем число, большее 10, мы добавляем 1 к нашему текущему значению переменной counter.
# В программе это реализовано в строке counter = counter + 1. Обратите внимание на начальное значение
# переменной счетчика counter = 0. Без начального значения мы получили бы ошибку, поскольку,
# дойдя до строки counter = counter + 1, Python ничего не знал бы о переменной counter.
# Строка кода counter = counter + 1 означает: возьми старое значение переменной counter,
# прибавь к нему 1 и переприсвой переменной это значение. Если не придать переменной начальное значение,
# то непонятно, к чему прибавлять 1 в самый первый раз.

# Подсчет количества – это очень частый сценарий. Он состоит из двух шагов:

# Создание переменной счетчика, и придание ей первоначального значения: counter = 0;
# Увеличение переменной счетчика на 1: counter = counter + 1.

# Часто при написании программ требуется использовать несколько счетчиков. Модифицируем предыдущую программу:
# посчитаем еще и количество нулей среди введенных чисел.

counter1 = 0
counter2 = 0
for _ in range(10):
    num = int(input())
    if num > 10:
        counter1 = counter1 + 1
    if num == 0:
        counter2 = counter2 + 1

print(f"Было введено {counter1} чисел, больших 10.")
print(f"Было введено {counter2} нулей.")

# Рассмотрим еще один пример: подсчитать количество чисел из диапазона [1;100], квадрат которых оканчивается на 4.
counter = 0
for i in range(1, 101):
    if i**2 % 10 == 4:
        counter = counter + 1

print(counter)

# Мы используем функцию range() с двумя параметрами для генерации последовательности чисел от 1 до 100. Каждый раз,
# когда переменная i последовательно принимает значения от 1 до 100,
# мы проверяем условие: i**2 % 10 == 4 (оканчивается ли квадрат числа i на 4).

# Для переменной счетчика удобно использовать имя counter (или более сокращенно cnt).

# Вычисление суммы и произведения

# Наравне с подсчетом количества по частоте стоит задача вычисления суммы.
# К примеру, видеоигра должна считать сумму очков. В таком случае начальное значение переменной будет равно 0,
# а далее оно будет увеличиваться на некоторое количество заработанных очков, скажем на 10. Мы пишем следующий код:

score = 0

score = score + 10

# Напишем программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.
total = 0
for _ in range(10):
    num = int(input())
    if num > 10:
        total = total + num

print(f"Сумма чисел больших 10 равна {total}")

# Каждый раз, когда программа считывает число, большее 10, она добавляет его к текущему значению переменной total.
# Это реализовано в строке total = total + num. Обратите внимание на начальное значение переменной-сумматора total = 0.
# Без начального значения мы получили бы ошибку, поскольку, дойдя до строки total = total + num,
# Python ничего не знал бы о переменной total . Строка кода total = total + num означает:
# возьми старое значение переменной total, прибавь к нему num и переприсвой переменной это значение.
# Если не придать переменной начальное значение, то не к чему прибавлять num в самый первый раз.

# Подсчет суммы состоит из двух шагов:
#
# Создание переменной сумматора и придание ей первоначального значения: total = 0;
# Увеличение переменной сумматора на нужное число: total = total + num.

# Напишем программу, которая считает сумму натуральных чисел от 1 до 100:
total = 0
for i in range(1, 101):
    total = total + i

print(f"Сумма равна {total}")

# Рассмотрим еще один пример: напишем программу, которая запрашивает 10 целых чисел и находит их среднее значение:

total = 0
for _ in range(10):
    num = int(input())
    total = total + num

average = total / 10
print(f"Среднее значение равно {average}")

# Аналогичным образом вычисляется произведение. При вычислении произведения начальное значение переменной
# мультипликатора мы устанавливаем равным 1, в отличие от сумматора, где оно равно 0.

# Для переменной сумматора и мультипликатора удобно использовать имя total.

# Обмен значений переменных

# Очень часто нам требуется обменять значения двух переменных x и y. Начинающие программисты иногда пишут такой код:

# x = y
# y = x

# Однако он не работает. Предположим, что x = 3 и y = 5. Первая строка присвоит переменной x значение 5, что правильно,
# однако вторая строка установит значение переменной y в 5, поскольку значение x уже равно 5. Для решения задачи мы
# можем использовать временную переменную:

temp = x
x = y
y = temp

# Такой код пишут почти во всех языках программирования. Однако в Python есть и более простой способ.
# Мы можем написать так:

x, y = y, x

# В результате выполнения такого кода Python поменяет значения переменных x и y местами.

# Сигнальные метки

# Сигнальная метка (флажок) может использоваться, когда надо, чтобы одна часть программы узнала о происходящем
# в другой части программы.
# Напишем программу, определяющую, что натуральное число является простым:

num = int(input())
flag = True

for i in range(2, num):
    if num % i == 0:  # если исходное число делится на какое-либо отличное от 1 и самого себя
        flag = False

if num == 1:
    print('Это единица, она не простая и не составная')
elif flag == True:
    print('Число простое')
else:
    print('Число составное')

# Напомним, что число является простым, если оно не имеет делителей, кроме 1 и самого себя. Вышеприведенная программа
# работает следующим образом: начальное значение переменной флага равно True, что говорит о том,
# что число является простым. Затем мы перебираем все числа от 2 до num - 1 (включительно).
# Если одно из этих значений оказывается делителем числа num, тогда число num является составным и мы устанавливаем
# значение флага False. Как только цикл завершен, мы проверяем, установлен флаг в True или нет.
# Если это так, мы знаем, что делитель найден не был и число является простым.
# В противном случае число является составным.

# Флаговые переменные могут иметь более осмысленное название. Например, в случае с проверкой числа на простоту,
# название флаговой переменной могло бы быть is_prime.

# Максимум и минимум

# Поиск наибольшего или наименьшего значения в некоторой последовательности чисел – также частая задача в
# программировании. Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее число.

largest = 0
for _ in range(10):
    num = int(input())
    if num > largest:
        largest = num

print('Наибольшее число равно', largest)

# Мы устанавливаем начальное значение переменной largest  в 0. Далее программа считывает 10 чисел,
# и если какое-то из них оказывается больше текущего значения largest, переприсваивает его.
# В качестве начального значения взято число 0, поскольку мы знаем, что все числа положительны
# (а 0 является максимальным неположительным числом). Таким образом, уже первое сравнение приведет к переприсваиванию.

# Распространен подход, когда в качестве начального значения переменной сразу принимается первый элемент
# последовательности. Напишем программу, которая считывает 10 чисел (необязательно положительных)
# и находит среди них наибольшее:

largest = int(input())  # принимаем первое число за максимальное
for _ in range(9):
    num = int(input())
    if num > largest:
        largest = num

print('Наибольшее число равно', largest)

# Для нахождения наименьшего значения последовательности следует поменять знак неравенства (>) на противоположный (<).
# В таком случае название переменной largest стоит заменить на smallest.

# Для переменных, хранящих наибольшее и наименьшее значения, подходят имена largest и smallest соответственно.

# Расширенные операторы присваивания

# Довольно часто программы имеют инструкции присваивания, в которых переменная на левой стороне от оператора = также
# появляется на правой от него стороне.
# Например,
counter = counter + 1

# На правой стороне оператора присваивания 1 прибавляется к переменной counter. Полученный результат затем
# присваивается переменной counter, заменяя первоначальное значение. По сути, это строка кода добавляет 1 к counter.
# Еще один пример такой инструкции мы видели при подсчете суммы:
total = total + num

# Эта инструкция присваивает значение выражения total + num переменной total. В результате исполнения этой инструкции
# число num прибавляется к значению total.

# Различные инструкции присваивания (в каждой инструкции x = 6)

# Эти типы операций находят широкое применение в программировании. Для удобства Python предлагает расширенные операторы
# присваивания. Расширенные операторы не требуют, чтобы программист дважды набирал имя переменной.
# Приведенную ниже инструкцию:

total = total + num

# можно переписать как

total += num

# Точно так же инструкцию

counter = counter + 1

# можно переписать как

counter += 1

# Оператор	Пример использования	Эквивалент
# +=	x += 5	x = x + 5
# -=	x -= 2	x = x - 2
# *=	x *= 10	x = x * 10
# /=	x /= 4	x = x / 4
# //=	x //= 4	x = x // 4
# %=	x %= 4	x = x % 4

# Примечания
# Примечание 1. Аналогичным образом можно менять местами значения трех и более переменных.
# a, b, c, d = b, c, d, a

# Примечание 2. Очень часто сигнальные метки называют flag.

# Примечание 3. Поскольку в Python есть встроенные функции max() и min(), то давать такие названия для максимального и
# минимального значения не очень хорошо. Куда лучше использовать названия largest и smallest или mx и mn.

# Примечание 4. Сумму чисел от 1 до 100, можно вычислить и без цикла:

# Действительно, числа от 1 до 100, можно разбить на 50 пар, сумма в которых равна 101:

# В начальной школе, где учился математик Карл Фридрих Гаусс (6 лет), учитель, чтобы занять класс на продолжительное
# время самостоятельной работой, дал задание ученикам – вычислить сумму всех натуральных чисел от 1 до 100.
# Маленький Гаусс ответил на вопрос почти мгновенно, применив указанный способ подсчета, чем невероятно удивил всех и,
# прежде всего, учителя.

# Что покажет приведенный ниже фрагмент кода?
num1 = 4
num2 = 6
num1 += num2
num1 *= num1
print(num1)
# 100

# Что покажет приведенный ниже фрагмент кода?
total = 0
for i in range(1, 6):
    total += i
print(total)
# 15

# Что покажет приведенный ниже фрагмент кода?
total = 0
for i in range(1, 6):
    total += i
    print(total, end="")
# 1361015

# Количество чисел
# На вход программе подаются два целых числа a и b (a <= b).
# Напишите программу, которая подсчитывает количество чисел в диапазоне от a до b
# включительно, куб которых оканчивается на
# 4 или 9.

# Формат входных данных
# На вход программе подаются два целых числа a и b (a <= b).

# Формат выходных данных
# Программа должна вывести одно целое число в соответствии с условием программы.

# Примечание. Куб числа a – это его третья степень a**3
total = 0
a, b = int(input()), int(input())

if a <= b:
    for i in range(a, b + 1):
        if i**3 % 10 == 4 or i**3 % 10 == 9:
            total += 1
print(total)
# Sample Input 1:
#
# 1
# 10
# Sample Output 1:
#
# 2
# Sample Input 2:
#
# 1
# 100
# Sample Output 2:
#
# 20
# Sample Input 3:
#
# 10
# 1786
# Sample Output 3:
#
# 355

# Сумма чисел
# На вход программе подается натуральное число n,
# а затем n целых чисел, каждое на отдельной строке. Напишите программу, которая подсчитывает сумму введенных чисел
# (не включая само число n).

# Формат входных данных
# На вход программе подаются натуральное число n,
# а затем n целых чисел, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести сумму данных чисел.
total = 0
n1 = int(input())
for i in range(n1):
    n2 = int(input())
    total += n2
print(total)
# Sample Input:
#
# 5
# 3
# 2
# 1
# 0
# -1
# Sample Output:
#
# 5

# Асимптотическое приближение

# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет значение выражения

# Примечание. Для вычисления натурального логарифма воспользуйтесь функцией log(n), которая находится в модуле math.

from math import *
num = 0
n = int(input())
for i in range(1, n):
    num += (1 / (i + 1))
num2 = num + 1 - log(n)
print(num2)
# Sample Input 1:
#
# 10
# Sample Output 1:
#
# 0.6263831609742079
# Sample Input 2:
#
# 1
# Sample Output 2:
#
# 1.0
# Sample Input 3:
#
# 100
# Sample Output 3:
#
# 0.5822073316515288

# Сумма чисел 2

# На вход программе подается натуральное число n.
# Напишите программу, которая подсчитывает сумму тех чисел от 1 до n (включительно),
# квадрат которых оканчивается на 2,5 или 8.

# Формат входных данных
# На вход программе подается натуральное число n.

# Формат выходных данных
# Программа должна вывести единственное число в соответствии с условием задачи.

# Примечание. Если таких чисел нет в указанном диапазоне, то следует вывести 0.
total = 0
number = int(input())
for i in range(1, number + 1):
    if i**2 % 10 == 2 or i**2 % 10 == 5 or i**2 % 10 == 8:
        total += i
print(total)
# Sample Input 1:
#
# 10
# Sample Output 1:
#
# 5
# Sample Input 2:
#
# 100
# Sample Output 2:
#
# 500
# Sample Input 3:
#
# 1992
# Sample Output 3:
#
# 198005

# Факториал
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет n!.

# Входные данные
# На вход программе подается натуральное число n, (n≤12).

# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.

# Примечание.
# Факториалом натурального числа n, называется произведение всех натуральных чисел от 1 до n, то есть
# n!=1⋅2⋅3⋅…⋅n
total = 1
number = int(input())
if number <= 12:
    for i in range(1, number + 1):
        total *= i
print(total)
# Sample Input 1:
#
# 3
# Sample Output 1:
#
# 6
# Sample Input 2:
#
# 1
# Sample Output 2:
#
# 1
# Sample Input 3:
#
# 2
# Sample Output 3:
#
# 2

# Без нулей
# Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.

# Формат входных данных
# На вход программе подаются 10 целых чисел, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести произведение отличных от нуля чисел.

# Примечание. Гарантируется, что хотя бы одно из 10 чисел является ненулевым.
total = 1
for i in range(10):
    number = int(input())
    if number != 0:
        total *= number
print(total)
# Sample Input 1:
#
# 8
# 0
# 1
# 2
# 1
# 0
# 0
# 5
# 4
# 12
# Sample Output 1:
#
# 3840
# Sample Input 2:
#
# 1
# 43
# 2
# 234
# 78
# 0
# 1
# 1
# 23
# 4
# Sample Output 2:
#
# 144409824
# Sample Input 3:
#
# 3
# 8
# 66
# 1110
# 4
# 2
# 2
# 1
# 0
# 0
# Sample Output 3:
#
# 28131840

# Сумма делителей
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет сумму всех его делителей.

# Входные данные
# На вход программе подается натуральное число n.

# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.

# Примечание. Функция подсчета суммы всех делителей числа является очень важной в теории чисел.
total = 0
number = int(input())
for i in range(1, number + 1):
    if number % i == 0:
        total += i
print(total)
# Sample Input 1:
#
# 10
# Sample Output 1:
#
# 18
# Sample Input 2:
#
# 50
# Sample Output 2:
#
# 93
# Sample Input 3:
#
# 3
# Sample Output 3:
#
# 4

# Знакочередующаяся сумма
# На вход программе подается натуральное число n.
# Напишите программу вычисления знакочередующей суммы:

# 1−2+3−4+5−6+…+(−1)**n+1⋅n

# Входные данные
# На вход программе подается натуральное число n.

# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.

# Примечание.
# Рассмотрим более подробно 2-й тест. Для числа n=5 у нас будет такая сумма: 1−2+3−4+5=3.

number = int(input())
total = 0
for i in range(number):
    if i % 2 == 0:
        total += i + 1
    else:
        total -= i + 1
print(total)
# Sample Input 1:
#
# 1
# Sample Output 1:
#
# 1
# Sample Input 2:
#
# 5
# Sample Output 2:
#
# 3
# Sample Input 3:
#
# 3
# Sample Output 3:
#
# 2

# Наибольшие числа 🌶️🌶️

# На вход программе подается натуральное число n,
# а затем n различных натуральных чисел последовательности, каждое на отдельной строке.
# Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.

# Формат входных данных
# На вход программе подаются натуральное число n≥2,
# а затем n различных натуральных чисел, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести два наибольших числа, каждое на отдельной строке.
max1 = 0
max2 = 1
number1 = int(input())
for i in range(1, number1 + 1):
    number2 = int(input())
    if number2 > max1:
        max2 = max1
        max1 = number2
    elif number2 > max2:
        max2 = number2
print(max1, max2, sep='\n')
# Sample Input 1:
#
# 5
# 1
# 2
# 3
# 4
# 5
# Sample Output 1:
#
# 5
# 4
# Sample Input 2:
#
# 8
# 9
# 7
# 5
# 4
# 3
# 2
# 78
# 1
# Sample Output 2:
#
# 78
# 9
# Sample Input 3:
#
# 13
# 1
# 2
# 3
# 5
# 8
# 233
# 13
# 21
# 34
# 377
# 55
# 89
# 144
# Sample Output 3:
#
# 377
# 233

# Only even numbers 🌶️
# Напишите программу,
# которая считывает последовательность из 10 целых чисел и определяет, является ли каждое из них четным или нет.

# Формат входных данных
# На вход программе подаются 10 целых чисел,
# каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести строку «YES», если все числа четные, и «NO» в ином случае.
total = 0
for i in range(10):
    number = int(input())
    if number % 2 != 0:
        total += 1
if total > 0:
    print('NO')
else:
    print('YES')
# Sample Input 1:
#
# 2
# 4
# 6
# 8
# 10
# 12
# 14
# 16
# 18
# 20
# Sample Output 1:
#
# YES
# Sample Input 2:
#
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10
# Sample Output 2:
#
# NO

# Последовательность Фибоначчи 🌶️
# Напишите программу, которая считывает натуральное число n
# и выводит первые n чисел последовательности Фибоначчи.

# Формат входных данных
# На вход программе подается одно число n (n≤100) – количество членов последовательности.

# Формат выходных данных
# Программа должна вывести члены последовательности Фибоначчи, отделенные символом пробела.

# Примечание.
# Последовательность Фибоначчи – это последовательность натуральных чисел,
# где каждое последующее число является суммой двух предыдущих:

# 1, 1, 2, 3, 5, 8, 13,  21, 34, 55, 89,…
total1 = 1
total2 = 0
number1 = int(input())
if number1 <= 100:
    for i in range(1, number1 + 1):
        total3 = total1
        total1 = total3 + total2
        total2 = total3
        print(total3, end=' ')
# Sample Input 1:
#
# 1
# Sample Output 1:
#
# 1
# Sample Input 2:
#
# 5
# Sample Output 2:
#
# 1 1 2 3 5
# Sample Input 3:
#
# 22
# Sample Output 3:
#
# 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711

#
















