# 7.8 Вложенные циклы. Часть 1

# Тема урока: вложенные циклы

# Вложенные циклы
# Операторы break и continue во вложенных циклах
# Решение задач

# Аннотация. Вложенные, находящиеся внутри других циклов, циклы.

# Вложенные циклы

# Вложенный цикл расположен в еще одном цикле. Часы служат хорошим примером работы вложенного цикла. Секундная,
# минутная и часовая стрелки вращаются вокруг циферблата.Часовая стрелка смещается всего на 1 шаг для каждых 60 шагов
# минутной стрелки. И секундная стрелка должна сделать 60 шагов для 1 шага минутной стрелки. Это означает, что для
# каждого полного оборота часовой стрелки (12 шагов), минутная стрелка делает 720 шагов.

# Рассмотрим цикл, который частично моделирует электронные часы. Он показывает секунды от 0 до 59:
for seconds in range(60):
    print(seconds)

# Можно добавить переменную minutes и вложить цикл написанный выше внутрь еще одного цикла, который повторяется 60 раз:
for minutes in range(60):
    for seconds in range(60):
        print(minutes, ':', seconds)

# Для того, чтобы сделать модель законченной, можно добавить еще одну переменную для подсчета часов:
for hours in range(24):
    for minutes in range(60):
        for seconds in range(60):
            print(hours, ':', minutes, ':', seconds)
# Результатом работы такого кода будет:
# 0 : 0 : 0
# 0 : 0 : 1
# 0 : 0 : 2
# ...
# 23 : 59 : 58
# 23 : 59 : 59

# Самый внутренний цикл сделает 60 итераций для каждой итерации среднего цикла. Средний цикл сделает 60 итераций для
# каждой итерации самого внешнего цикла. Когда самый внешний цикл сделает 24 итерации,
# средний сделает 24⋅60=1440 итераций, и самый внутренний цикл сделает 24 ⋅60⋅60=86400 итераций!

# Пример имитационной модели часов подводит нас к нескольким моментам, имеющим отношение к вложенным циклам:

# вложенный цикл выполняет все свои итерации для каждой отдельной итерации внешнего цикла;
# вложенные циклы завершают свои итерации быстрее, чем внешние циклы;
# для того, чтобы получить общее количество итераций вложенного цикла, надо перемножить количество итераций всех циклов.

# Мы можем вкладывать друг в друга циклы как for, так и while.

# Операторы break и continue во вложенных циклах

# Оператор break выполняет прерывание ближайшего цикла в котором он расположен.
# Аналогично, оператор continue осуществляет переход на следующую итерацию ближайшего цикла.

# Рассмотрим программный код:
for i in range(3):
    for j in range(3):
        print(i, j)
# Результатом его выполнения будут 9 строк:
# 0 0
# 0 1
# 0 2
# 1 0
# 1 1
# 1 2
# 2 0
# 2 1
# 2 2

# Изменим код, добавив во вложенный цикл условный оператор с оператором break:
for i in range(3):
    for j in range(3):
        if i == j:
            break
        print(i, j)
# Результатом выполнения нового кода будут 3 строки:
# 1 0
# 2 0
# 2 1

# Изменим оператор прерывания break на оператор continue:
for i in range(3):
    for j in range(3):
        if i == j:
            continue
        print(i, j)
# Результатом выполнения нового кода будут 6 строк:
# 0 1
# 0 2
# 1 0
# 1 2
# 2 0
# 2 1

# Если необходимо добиться прерывания внешнего цикла из-за выполнения условия во внутреннем,
# то стоит сделать это через сигнальную метку.

# Примеры решения задач
# Один интересный способ узнать о работе вложенных циклов состоит в их использовании для вывода на экран
# комбинаций символов. Давайте взглянем на один простой пример. Предположим, что мы хотим
# напечатать на экране звездочки в виде прямоугольной таблицы:

# ******
# ******
# ******
# ******
# ******
# ******
# ******
# ******

# Таблица состоящая из звездочек состоит из 8 строк и 6 столбцов. Приведенный ниже фрагмент кода можно использовать
# для вывода одной строки звездочек:
for i in range(6):
    print('*', end='')
# Для того чтобы завершить весь вывод таблицы звездочек, нам нужно выполнить этот цикл восемь раз.
# Мы можем поместить этот цикл в еще один цикл, который делает восемь итераций, как показано ниже:
for i in range(8):
    for j in range(6):
        print('*', end='')
    print()
# Внешний цикл делает восемь итераций. Во время каждой итерации этого цикла внутренний цикл делает 6 итераций.
# (Обратите внимание, что в строке 4 после того, как все строки были напечатаны, мы вызываем функцию print().
# Мы должны это сделать, чтобы в конце каждой строки продвинуть экранный курсор на следующую строку.
# Без этой инструкции все звездочки
# будут напечатаны на экране в виде одной длинной строки.)

# Давайте рассмотрим еще один пример. Предположим, что вы хотите напечатать звездочки в комбинации, которая похожа на
# приведенный ниже звездный треугольник:

# *
# **
# ***
# ****
# *****
# ******
# *******
# ********

# Представим эту комбинацию звездочек, как сочетание строк и столбцов. В этой комбинации всего восемь строк.
# В первой строке один столбец. Во второй строке – два столбца. В третьей строке – три.
# И так продолжается до восьмой строки, в которой восемь столбцов.
for i in range(8):
    for j in range(i + 1):
        print('*', end='')
    print()

# Установите в каком порядке, указанный вложенный цикл выведет пары чисел (i, j).
for i in range(1, 4):
    for j in range(3, 6):
        print(i, j)
# 1 3
# 1 4
# 1 5
# 2 3
# 2 4
# 2 5
# 3 3
# 3 4
# 3 5

# Что покажет приведенный ниже фрагмент кода?
for i in range(1, 4):
    for j in range(3, 5):
        print(i + j, end='')
# 455667

# Что покажет приведенный ниже фрагмент кода?
counter = 0
for i in range(99, 102):
    temp = i
    while temp > 0:
        counter += 1
        temp //= 10
print(counter)
# 8

# Таблица-1
# Дано натуральное число n (n≤ 9).
# Напишите программу, которая печатает таблицу размером n×3,
# состоящую из данного числа (числа отделены одним пробелом).

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести таблицу размером n×3, состоящую из данного числа.

# Примечание. В конце строки может быть пробел.

number = int(input())
for i in range(number):
    for j in range(3):
        print(number, end=' ')
    print()
# Sample Input 1:
#
# 8
# Sample Output 1:
#
# 8 8 8
# 8 8 8
# 8 8 8
# 8 8 8
# 8 8 8
# 8 8 8
# 8 8 8
# 8 8 8
# Sample Input 2:
#
# 4
# Sample Output 2:
#
# 4 4 4
# 4 4 4
# 4 4 4
# 4 4 4
# Sample Input 3:
#
# 1
# Sample Output 3:
#
# 1 1 1

# Таблица-2
# Дано натуральное число n (n≤ 9).
# Напишите программу, которая печатает таблицу размером n×5,
# где в i-ой строке указано число i (числа отделены одним пробелом).

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести таблицу размером n×5 в соответствии с условием.

# Примечание. В конце строки может быть пробел.

number = int(input())
for i in range(number):
    for j in range(5):
        print(i + 1, end=' ')
    print()
# Sample Input 1:
#
# 3
# Sample Output 1:
#
# 1 1 1 1 1
# 2 2 2 2 2
# 3 3 3 3 3
# Sample Input 2:
#
# 6
# Sample Output 2:
#
# 1 1 1 1 1
# 2 2 2 2 2
# 3 3 3 3 3
# 4 4 4 4 4
# 5 5 5 5 5
# 6 6 6 6 6
# Sample Input 3:
#
# 1
# Sample Output 3:
#
# 1 1 1 1 1

# Таблица-3

# Дано натуральное число n (n≤ 9).
# Напишите программу, которая печатает таблицу сложения
# для всех чисел от 1 до n (включительно) в соответствии с примером.

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести таблицу сложения для всех чисел от 1 до n.

# Примечание 1. Таблицу сложения подразумеваем от 1 до 9 (включительно).

# Примечание 2. В конце строки может быть пробел.

number = int(input())
for i in range(number):
    for j in range(9):
        print(i + 1, "+", j, "=", i + 1 + j)
    print()
# Sample Input 1:
#
# 1
# Sample Output 1:
#
# 1 + 1 = 2
# 1 + 2 = 3
# 1 + 3 = 4
# 1 + 4 = 5
# 1 + 5 = 6
# 1 + 6 = 7
# 1 + 7 = 8
# 1 + 8 = 9
# 1 + 9 = 10
# Sample Input 2:
#
# 3
# Sample Output 2:
#
# 1 + 1 = 2
# 1 + 2 = 3
# 1 + 3 = 4
# 1 + 4 = 5
# 1 + 5 = 6
# 1 + 6 = 7
# 1 + 7 = 8
# 1 + 8 = 9
# 1 + 9 = 10
#
# 2 + 1 = 3
# 2 + 2 = 4
# 2 + 3 = 5
# 2 + 4 = 6
# 2 + 5 = 7
# 2 + 6 = 8
# 2 + 7 = 9
# 2 + 8 = 10
# 2 + 9 = 11
#
# 3 + 1 = 4
# 3 + 2 = 5
# 3 + 3 = 6
# 3 + 4 = 7
# 3 + 5 = 8
# 3 + 6 = 9
# 3 + 7 = 10
# 3 + 8 = 11
# 3 + 9 = 12

# Звездный треугольник 🌶️🌶️
# Дано нечетное натуральное число n.
# Напишите программу, которая печатает равнобедренный звездный треугольник с основанием,
# равным n в соответствии с примером:

# *
# **
# ***
# ****
# ***
# **
# *

# Формат входных данных
# На вход программе подается одно нечетное натуральное число.

# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.

# Примечание. Используйте вложенный цикл for.

number = int(input())
for i in range(1, number // 2 + 2):
    print(i * '*')
for j in range(number // 2, 0, -1):
    print(j * '*')
# Sample Input 1:
#
# 3
# Sample Output 1:
#
# *
# **
# *
# Sample Input 2:
#
# 5
# Sample Output 2:
#
# *
# **
# ***
# **
# *

# Численный треугольник 1
# Дано натуральное число n.
# Напишите программу, которая печатает численный треугольник в соответствии с примером:

# 1
# 22
# 333
# 4444
# 55555
# ...

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.

# Примечание. Используйте вложенный цикл for.

number = int(input())
for i in range(number):
    for j in range(i + 1):
        print(i + 1, end='')
    print()
# Sample Input:
#
# 5
# Sample Output:
#
# 1
# 22
# 333
# 4444
# 55555

# Использование вложенных циклов при решении уравнений

# Вложенные циклы можно использовать для решения уравнений с несколькими переменными. Зная, что решения (корни)
# уравнения являются натуральными (целыми) числами, несложно написать программу, содержащую вложенный цикл и
# перебирающую все возможные значения переменных.

# Решение задач
# Задача 1. Найдите все пары натуральных чисел (и их количество), являющихся решением уравнения 12x+13y=777.

# Решение. Поскольку по условию числа y являются натуральными, то x≤64,y≤59
# (при x=65, 12⋅65=780, что больше, чем 777, поэтому x≤64, т.к.
# y не может быть отрицательным по условию; аналогично получается, что y≤59).
# Напишем программу, которая перебирает всевозможные пары чисел (x;y) и проверяет для них выполнение условия 12x+13y=777

total = 0
for x in range(1, 65):
    for y in range(1, 60):
        if 12 * x + 13 * y == 777:
            total += 1
            print('x =', x, 'y =', y)
print('Общее количество натуральных решений =', total)

# В результате выполнения такого кода, мы получим:

# x = 3 y = 57
# x = 16 y = 45
# x = 29 y = 33
# x = 42 y = 21
# x = 55 y = 9
# Общее количество натуральных решений = 5

# Задача 2. Найдите все пары натуральных чисел (и их количество),
# являющихся решением уравнения x**2 + y**2 + z**2 = 2020.

# Решение.  Поскольку по условию числа x,y и z являются натуральными, то x, y, z < 2020**0.5 =45
# Напишем программу, которая перебирает всевозможные
# тройки чисел (x;y;z) и проверяет для них условие x**2 + y**2 + z**2 = 2020.
total = 0
for x in range(1, 45):
    for y in range(1, 45):
        for z in range(1, 45):
            if x**2 + y**2 + z**2 == 2020:
                total += 1
                print('x =', x, 'y =', y, 'z =', z)
print('Общее количество натуральных решений =', total)

# В результате выполнения такого кода, мы получим:

# x = 18 y = 20 z = 36
# x = 18 y = 36 z = 20
# x = 20 y = 18 z = 36
# x = 20 y = 36 z = 18
# x = 36 y = 18 z = 20
# x = 36 y = 20 z = 18
# Общее количество натуральных решений = 6

# 12 месяцев

# Решите уравнение в натуральных числах 28n+30k+31m=365.

# Примечание. Используйте вложенный цикл for. В первую очередь запишите решение с наименьшим значением n.

for n in range(1, 14):
    for k in range(1, 13):
        for m in range(1, 12):
            if 28 * n + 30 * k + 31 * m == 365:
                print('n =', n, 'k =', k, 'm =', m)
# n = 1 k = 4 m = 7
# n = 2 k = 1 m = 9

# Старинная задача
# Имеется 100 рублей. Сколько быков, коров и телят можно купить на все эти деньги, если плата за быка – 10 рублей,
# за корову – 5 рублей, за теленка – 0.5 рубля и надо купить 100 голов скота?

# Примечание. Используйте вложенный цикл for.

for x in range(1, 100):
    for y in range(1, 100):
        for z in range(1, 100):
            if 10 * x + 5 * y + 0.5 * z == 100 and x + y + z == 100:
                print('x =', x, 'y =', y, 'z =', z)

# x = 1 y = 9 z = 90

# Гипотеза Эйлера о сумме степеней 🌶️🌶️

# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма, предполагая, что по крайней мере n
# энных степеней необходимо для получения суммы, которая сама является энной степенью для n>2. Напишите программу для
# опровержения гипотезы Эйлера (продержавшейся до 1967 года) и найдите четыре положительных целых числа,
# сумма 5-х степеней которых равна 5-й степени другого положительного целого числа.

# Таким образом, найдите пять натуральных чисел a,b,c,d,e, удовлетворяющих условию:

# a**5 + b**5 + c**5 + d**5 = e**5.

# В ответе укажите сумму a + b + c + d + e.

# Примечание 1. Используйте вложенный цикл for.

# Примечание 2. Считайте, что числа a,b,c,d,e не превосходят 150.

# Примечание 3. Программа может работать дольше чем обычно. В зависимости от способа решения задачи на выполнение
# программы может уходить до нескольких минут. Попробуйте сократить количество вложенных циклов.

