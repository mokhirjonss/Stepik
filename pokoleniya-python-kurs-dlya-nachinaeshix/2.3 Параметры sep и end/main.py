# 2.3 Параметры sep и end

# Тема урока: sep, end, переменные, PEP 8

# Необязательные параметры команды print(): sep, end
# Переменные
# Стандарт PEP 8
# Комментарии
# Решение задач

# Аннотация. Урок посвящен изучению необязательных параметров команды print() и более детальному разбору понятия переменных. Также мы поговорим о комментариях и стандарте PEP 8, которого придерживаются Python-программисты.

# Необязательные параметры команды print

# По умолчанию команда print() принимает несколько аргументов (параметров), выводит их через один пробел, после чего ставит перевод строки. Это поведение можно изменить, используя необязательные именованные параметры sep (separator, разделитель) и end (окончание).

# Параметр sep

# Рассмотрим следующий код:
print('a', 'b', 'c')
print('d', 'e', 'f')

# Результатом выполнения такого кода будет:
# a b c
# d e f

# Рассмотрим следующий код:
print('a', 'b', 'c', sep='*')
print('d', 'e', 'f', sep='**')
# Результатом выполнения такого кода будет:
# a*b*c
# d**e**f

# При первой печати в качестве строки разделителя между аргументами команды print() установлена строка sep='*'.

# При второй печати в качестве строки разделителя между аргументами команды print() установлена строка sep='**'.

# Таким образом, необязательный параметр sep команды print() позволяет установить строку, с помощью которой будут разделены аргументы при печати.

# Параметр end

# Если перевод строки делать не нужно или требуется указать специальное окончание, то следует явно указать значение для параметра end.

# Рассмотрим следующий код:
print('a', 'b', 'c', end='@')
print('d', 'e', 'f', end='@@')
# Результатом выполнения такого кода будет:
# a b c@d e f@@

# По завершении первой печати вставлена строка @ вместо перевода строки. Аналогично, по завершении второй печати вставлена строка @@.

# Параметры sep и end можно использовать вместе. Рассмотрим следующий код:
print('a', 'b', 'c', sep='*', end='finish')
print('d', 'e', 'f', sep='**', end='^__^')
print('g', 'h', 'i', sep='+', end='%')
print('j', 'k', 'l', sep='-', end='#')
print('m', 'n', 'o', sep='/', end='!')
# Результатом выполнения такого кода будет:
# a b c@d e f@@a*b*cfinishd**e**f^__^g+h+i%j-k-l#m/n/o!

# Примечания

# Примечание 1. Вызов команды print() с пустыми скобками ставит перевод строки.

# Примечание 2. Последовательность символов \n называется управляющей последовательностью и задает перевод строки.

# Примечание 3. Значения по умолчанию у параметров sep и end следующие:
sep=' '   # пробел
end='\n'  # перевод строки

# Примечание 4. Чтобы убрать все дополнительные выводимые символы, можно вызывать команду print() так:
print('a', 'b', 'c', sep='', end='')
#abc

# Примечание 5. Программный код
print('Python')
# Python
# равнозначен коду
print('Python', end='\n')

# Примечание 6. Если после вывода данных нужно более одного перевода строки, то необходимо использовать следующий код:
print('Python', end='\n\n\n')
# Python

# Что будет выведено на экран в результате выполнения следующего кода?
#
# print('31', '12', '2019', sep='-')
# 31-12-2019

# Что будет выведено на экран в результате выполнения следующего кода?
#
# print('Mercury', 'Venus', sep='*', end='!')
# print('Mars', 'Jupiter', sep='**', end='?')
# Mercury*Venus!Mars**Jupiter?

# Сколько строк будет распечатано в результате выполнения следующего кода?
#
# print('a', 'b', 'c', sep='*')
# print('d', 'e', 'f', sep='**', end='')
# print('g', 'h', 'i', sep='+', end='%')
# print('j', 'k', 'l', sep='-', end='\n')
# print('m', 'n', 'o', sep='/', end='!')
# print('p', 'q', 'r', sep='1', end='%')
# print('s', 't', 'u', sep='&', end='\n')
# print('v', 'w', 'x', sep='%')
# print('y', 'z', sep='/', end='!')
# Примечание. Последовательность символов \n задает перевод строки.
print('a', 'b', 'c', sep='*')
print('d', 'e', 'f', sep='**', end='')
print('g', 'h', 'i', sep='+', end='%')
print('j', 'k', 'l', sep='-', end='\n')
print('m', 'n', 'o', sep='/', end='!')
print('p', 'q', 'r', sep='1', end='%')
print('s', 't', 'u', sep='&', end='\n')
print('v', 'w', 'x', sep='%')
print('y', 'z', sep='/', end='!')
# 5
print()
# I like Python
# Напишите программу, которая выводит на экран текст «I***like***Python» (без кавычек).
#
# Примечание. Используйте необязательный параметр sep.
print('I', 'like', 'Python', sep='***')
# I***like***Python

# Кастомный разделитель
# Напишите программу, которая считывает строку-разделитель и три строки, а затем выводит указанные строки через разделитель.
#
# Формат входных данных
# На вход программе подаётся строка-разделитель и три строки, каждая на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести введённые три строки через разделитель.

pes = input()
first_word = input()
second_word = input()
third_word = input()
print(first_word, second_word, third_word, sep=pes)
# *
# Раз
# Два
# Три
# Раз*Два*Три

# Приветствие
# Напишите программу, которая приветствует пользователя, выводя слово «Привет» (без кавычек), после которого должна стоять запятая и пробел, а затем введенное имя и восклицательный знак.
#
# Формат входных данных
# На вход программе подаётся одна строка — имя пользователя.
#
# Формат выходных данных
# Программа должна вывести текст в соотвествии с условием задачи.
#
# Примечание 1. Перед восклицательным знаком не должно быть пробелов.
#
# Примечание 2. Используйте необязательный параметр end.
name = input()
print('Привет,', name, end='!')
# Тирион
# Привет, Тирион!

# Переменные

# В предыдущих упражнениях мы уже использовали переменные, но авторы курса до сих пор не объясняли, что же это такое и с чем его едят.

# Мы знаем, что команда input() обозначает «подожди, пока пользователь введет что-нибудь с клавиатуры, и запомни то, что он ввёл». Просто так просить «запомнить» довольно бессмысленно: нам ведь потом надо будет как-то сказать компьютеру, чтобы он вспомнил то, что запомнил. Для этого используем переменные и пишем такой код:

variable_name = input()
print("Вы ввели текст:", variable_name)

# Данный код означает: «Сохрани то, что ввёл пользователь, в памяти, и дальше это место в памяти мы будем называть именем variable_name». Соответственно, команда print(variable_name) означает: «Посмотри, что лежит в памяти, под именем variable_name, и выведи это на экран».

# Вот такие «места в памяти» называются переменными. Любая переменная имеет имя и значение.

# Имя переменной
# В имени переменной используйте только латинские буквы a-z, A-Z, цифры и символ нижнего подчеркивания (_);
#
# Имя переменной не может начинаться с цифры;
#
# Имя переменной по возможности должно отражать её назначение.

# Запомни: Python — регистрочувствительный язык. Переменная name и Name — две совершенно разные переменные. Для именования переменных принято использовать стиль lower_case_with_underscores (слова из маленьких букв с подчеркиваниями).

# Значение переменной

# Значение переменной — сохраненная в ней информация. Это может быть текст, число и т.д.
#
# Знак «=» это оператор присваивания. Он присваивает значение, которое находится справа от знака «равно», переменной, которая находится слева от знака «равно».
#
# В нашем случае это то, что поместил в неё пользователь командой input(). Это текстовое значение — строка. То есть переменная сохраняет в себе строковое значение. Говорят, что переменная имеет строковый тип данных.

# Запомни: интерпретатор ждет, что пользователь что-то введет с клавиатуры ровно столько раз, сколько команд input() встречается в программе. Каждый input() завершается нажатием Enter на клавиатуре.

# Значения переменной, естественно, можно менять (переприсваивать).

print('Как тебя зовут?')
name = input()
print('Привет,', name)
name = 'Timur'
print('Привет,', name)

# Оператор присваивания сообщает переменной то или иное значение независимо от того, была ли эта переменная введена раньше. Вы можете менять значение переменной, записав еще один оператор присваивания. Если у нас имеется переменная, мы можем делать с её значением все что угодно — например, присвоить другой переменной:
name1 = "Тимур"
name2 = name1
print(name2)

# Итак, если вы хотите, чтобы у вас была переменная с каким-то именем и каким-то значением, нужно написать на отдельной строчке:

# <имя переменной> = <значение переменной>

# Как только эта команда выполнится, в программе появится переменная с указанным значением.

# Запомни: название переменной всегда должно быть слева от знака равенства.

# Следующий код приведет к ошибке:  'Timur' = name.

# Множественное присваивание

# В языке Python можно за одну инструкцию присваивания изменять значение сразу нескольких переменных. Делается это так:
name, surname = 'Timur', 'Guev'
print('Имя:', name, 'Фамилия:', surname)

# Этот код можно записать и так:
name = 'Timur'
surname = 'Guev'
print('Имя:', name, 'Фамилия:', surname)

# Отличие двух способов состоит в том, что множественное присваивание в первом способе присваивает значение двум переменным одновременно.

# Если требуется считать текст с клавиатуры и присвоить его в качестве значения переменным, то можно написать так:
name, surname = input(), input()
print('Имя:', name, 'Фамилия:', surname)

# Если слева от знака «равно» в множественном присваивании должны стоять через запятую имена переменных, то справа могут стоять произвольные выражения, разделённые запятыми. Главное, чтобы слева и справа от знака присваивания было одинаковое число элементов.

# Множественное присваивание удобно использовать, когда нужно обменять значения двух переменных. В Python это делается так:

name1 = 'Timur'
name2 = 'Gvido'
name1, name2 = name2, name1

# Примечания

# Примечание 1. Названия переменных ничего не говорят интерпретатору, и даже в очень хорошо названной переменной не появится нужное значение, если мы сами его туда не запишем.

# Примечание 2. Новое значение переменной вытесняет старое. Важно представлять, чему равно значение переменной в каждый момент времени.

# Примечание 3. Переменные можно вводить в любой момент (не только в самом начале программы).

# Примечание 4. В качестве названия переменных запрещено использовать ключевые (зарезервированные) слова. К ключевым словам в языке Python относятся:
#
# False;
# True;
# None;
# and;
# with;
# as;
# assert;
# break;
# class;
# continue;
# def;
# del;
# elif;
# else;
# except;
# finally;
# try;
# for;
# from;
# global;
# if;
# import;
# in;
# is;
# lambda;
# nonlocal;
# not;
# or;
# pass;
# raise;
# return;
# while;
# yield.

# Какие из имён допустимы для названия переменных в Python?
# teacher
#
# teacher2
#
# teacher_2

# Что покажет приведенный ниже фрагмент кода?
#
# language = 'Python'
# language = 'Pascal'
# print(language)
# Pascal

# Какое значение будет находиться в переменной s1 после выполнения следующего кода?
#
# s1 = 'C++'
# s2 = 'Python'
# s3 = 'Java'
# s3 = s2
# s1 = s3
# Python

# PEP 8
# При оформлении программ мы будем пользоваться PEP 8 — Python Enhanced Proposal. Этот документ предлагает единый и общепринятый стиль написания программ на языке Python. Документ создан по рекомендациям Гвидо Ван Россума, автора Python. Прочесть его на русском языке можно по ссылке.

# Некоторые рекомендации PEP 8
# Рекомендация 1. Избегайте использования пробелов перед открывающей скобкой, после которой начинается список аргументов функции.
#
# Правильно:
print('Follow PEP8!')
# Неправильно:
#
# print ('Follow PEP8!')

# Рекомендация 2. После запятой нужен пробел.
# Правильно:
print('PEP8', 'Rocks!')
# Неправильно:
#
# print('PEP8','Rocks!')

# Рекомендация 3. Не отделяйте пробелами знак «равно», когда он употребляется для обозначения значения параметра по умолчанию.

# Правильно:
print('My name', 'is', 'Python', sep='**', end='+')
# Неправильно:
#
# print('My name', 'is', 'Python', sep = '**', end = '+')

# Комментарии
# До этого момента всё, что мы набирали в тексте наших программ, представляло собой команды для компьютера. Но в программу имеет смысл включать также примечания, описывающие, что она делает и как работает. Это может помочь вам или кому-то другому понять принцип работы программы спустя некоторое время.

# Такие примечания называются комментариями.

# Однострочные комментарии
# Любую строку можно превратить в комментарий, поместив перед ней символ #.
#
# Рассмотрим следующий код:
# Это комментарий в программе на языке Python.
print('Python rocks!')

# Если запустить эту программу, то получится:
# Python rocks!

# Первая строка при запуске игнорируется. Комментарий, начинающийся с символа #, предназначен только для автора программы и для тех, кто будет читать этот код.

# Комментарий в конце строки
# Комментарий можно поместить после строки кода.
print('Python rocks') # Это комментарий в программе на языке Python.
# Комментарий начинается после символа #. Все, что находится до этого символа, представляет собой обычный код. Если запустить эту программу, получится:
# Python rocks!

# Примечания

# Примечание 1. Согласно стандарту PEP 8, комментарии должны отделяться хотя бы двумя пробелами от кода. Они должны начинаться с символа # и одного пробела.
#
# Правильно:
# Далкк будет напечатан текст
print('Comments in Python')  # Печать текста с помощью команды print.
# Неправильно:
#
# #Далее будет напечатан текст
# print('Comments in Python')#Печать текста с помощью команды print.

# Примечание 2. При вводе комментариев в среде IDE вы обнаружите, что они выделяются цветом. Это сделано, чтобы облегчить чтение кода.

# Выберите строки кода, соответствующие стандарту PEP 8.
#
# Примечание. Будьте внимательны с пробелами.
# print('Follow PEP8!')
# print('Follow', 'PEP8!')
# print('Follow', 'PEP8', sep='**')
# name = input()

# Что будет напечатано в результате выполнения следующей программы?
#
# # print('Java')
# # print('Ruby')
# # print('Scala')
# print('Python', end='+')  # print('C++')
# # print('GO')
# print('C#', end='=')  # print('C')
# print('awesome')
# # finish

# Python+C#=awesome






