# 15.6 Калькулятор систем счисления

# Системы счисления

# Система счисления — символический метод записи чисел, то есть представление чисел с помощью письменных знаков.

# число — некоторая абстрактная сущность, мера для описания количества чего-либо;
# цифра — знак, используемый для записи чисел.

# Цифры бывают разные, а самые распространенные — арабские цифры, представляемые знаками от нуля (0) до девяти (9);
# менее распространены римские цифры, их можно встретить на циферблате часов или в обозначении века (XIX век).

# Поскольку чисел гораздо больше, чем цифр, для записи числа обычно используется набор цифр.
# Только для самых малых по величине целых чисел достаточно одной цифры.

# Существует много способов записи чисел с помощью цифр, называемых системами счисления. Величина числа может зависеть
# от порядка цифр в записи, а может и не зависеть. Все системы счисления можно разделить на 4 основные группы:

# унарные;
# позиционные;
# непозиционные;
# смешанные.

# Унарные системы счисления

# В древние времена, когда люди начали считать, появилась потребность и записывать числа. Количество предметов
# изображалось черточками или насечками на какой-либо твердой поверхности: камне, дереве, глине. Позже значки стали
# группировать по три или по пять. Такая система записи чисел называется унарной (единичной), так как любое число в ней
# образуется путем повторения одного знака, символизирующего единицу. Отголоски унарной системы счисления встречаются и
# сегодня (счетные палочки для обучения счету; полоски, нашитые на рукаве и обозначающие на каком курсе учится курсант
# военного училища).

# Позиционные системы счисления

# В позиционных системах счисления значение цифры зависит от ее положения — позиции — в числе.

# Например, число 15 обозначает пятнадцать, 51 — пятьдесят один.

# Позиционные системы счисления позволяют легко производить арифметические расчеты.

# Представление чисел с помощью арабских цифр — самая распространенная позиционная система счисления, она называется
# десятичной системой счисления потому, что использует десять цифр: 0,1,2,3,4,5,6,7,8 и 9.

# Запомни: максимальная цифра (9) на единицу меньше количества цифр (10).

# Количество цифр, используемое в системе счисления, называется ее основанием. В десятичной системе основание равно
# десяти, в двоичной системе — двум, ну а в восьмеричной и шестнадцатеричной — соответственно, восьми и шестнадцати.

# Запомни: В позиционной системе счисления с основанием p используются цифры от 0 до p−1.

# Непозиционные системы счисления

# В непозиционных системах счисления значение цифры не зависит от ее положения — позиции — в записанном числе.
# Примером непозиционной системы счисления является римская система (см. примечание).

# апомни: при использовании непозиционных систем счисления очень сложно выполнять математические расчеты и  необходимо
# большое количество различных знаков для записи чисел, особенно больших.

# Смешанные системы счисления

# Смешанные системы счисления — это когда числа, заданные в системе счисления с основанием p изображают с помощью цифр
# другой системы, с основанием q, где q <p. Такая система называется q−p - ичной со
# старшим основанием p и младшим основанием q.

# Денежные знаки — пример смешанной системы счисления. Сейчас в России используются монеты и купюры следующих номиналов:
# по 1,2,5,10,50,100,200,500,1000,2000,5000 рублей и по 5,10,50 копеек. Чтобы получить некоторую сумму в рублях,
# нужно использовать некоторое количество денежных знаков различного достоинства.
# Например, 12000 рублей и 25 копеек можно представить так:

# В данном случае можно сказать, что p=1 руб=100 копеек – старшее основание и q=1 копейка – младшее основание.

# Таким образом, у этой системы целый ряд оснований, равный достоинствам денежных знаков, также используется основание
# той системы, с помощью которой производится их счет.

# Примечания

# Примечание 1.  Римская система счисления — непозиционная,
# в ней для записи чисел используются буквы латинского алфавита:

# I — означает «один» (1);
# V — означает «пять» (5);
# X — означает «десять» (10);
# L — означает «пятьдесят» (50);
# C — означает «сто» (100);
# D — означает «пятьсот» (500);
# M — означает «тысяча» (1000).

# Для записи чисел в римской системе используются два правила:

# каждый меньший знак, поставленный слева от большего, вычитается из него;
# каждый меньший знак, поставленный справа от большего, прибавляется к нему.

# Примеры:
# число 49 в римской системе счисления имеет вид XLIX=(50−10)+(10−1)=40+9 (две группы первого вида).
# число 444 в римской системе счисления будет записано в виде CDXLIV=(500−100)+(50−10)+(5−1)=400+40+4
# (три группы второго вида).

# Римская система счисления сегодня используется в основном для обозначения знаменательных и юбилейных дат,
# разделов и глав в книгах.

# Примечание 2. Наиболее употребляемыми в настоящее время позиционными системами являются:

# 1 — единичная (счёт на пальцах, зарубки и др.);
# 2 — двоичная (в дискретной математике, информатике, программировании);
# 8 — восьмеричная;
# 10 — десятичная (используется повсеместно);
# 12 — двенадцатеричная (счёт дюжинами);
# 16 — шестнадцатеричная (используется в программировании, информатике).

# Примечание 3. Первая позиционная система счисления была придумана еще в Древнем Вавилоне, причем вавилонская нумерация
# была шестидесятеричная, т.е. в ней использовалось шестьдесят цифр.
# Мы до сих пор считаем, час –  60 минут, минута –  60 секунд, окружность –  360∘.

# Примечание 4. Для обозначения цифр в системах счисления с основанием больше 10 традиционно используются
# буквы английского алфавита — 10=A,11=B,12=C, и так далее.

# Перевод чисел из любой системы счисления в десятичную

# Мы пользуемся свернутой формой записи числа, но мы знаем, что, например, десятичное число
# 352=3⋅100 +5⋅10 +2.

# В развернутой форме производится умножение цифр числа на степень основания, т.е.
# 352 = 3⋅10**2 + 5⋅10**1 + 2⋅10**0.

# То есть любое число в позиционной системе счисления можно записать в развернутой форме и перевести в
# десятичную систему счисления.

# Переведите двоичное число 111111_2 в десятичную систему счисления.
# 63

# Переведите шестнадцатеричное число 1AF2_16 в десятичную систему счисления.
# 6898

# В саду 88_n фруктовых деревьев, из них 32_n яблони, 22_n груши, 16_n слив и 17_n вишен.
# В какой системе счисления посчитаны деревья?
# Примечание. Переведите числа из n-ой системы счисления в десятичную и составьте уравнение.
# 9

# Перевод чисел из десятичной системы счисления в любую другую

# Для перевода чисел из десятичной системы счисления в любую другую пользуются следующим алгоритмом:
# делим данное число на основание новой системы счисления и фиксируем целое частное и остаток от деления
# (остаток всегда меньше основания);
# если полученное частное больше основания, то делим частное на основание и вновь фиксируем новое частное и остаток от деления;
# повторяем этот процесс до тех пор, пока частное не получится меньше делителя, то есть основания новой системы счисления;
# полученные остатки, являющиеся цифрами числа в новой системе счисления, приводим в соответствие с ее алфавитом;
# записываем последнее частное и полученные остатки в обратном порядке в ряд слева направо.

# Переведите десятичное число 1000_10 в шестнадцатеричную систему счисления.
print(hex(1000))
# 3e8

# Переведите десятичное число 513_10 в двоичную систему счисления.
print('Перевод числа из 10-й системы счисления')
num = int(input('Введите число: '))
a = num
osn = int(input('В какую систему счисления требуется перевести?: '))
ch = ''
my_dict = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C',
           13: 'D',
           14: 'E', 15: 'F'}
while True:
    pr = num // osn
    ch = ch + my_dict[num - (pr * osn)]
    num = pr
    if pr == 0:
        break
print(f'Число {a} в в основании {osn}:', ch[::-1])
# Перевод числа из 10-й системы счисления
# Введите число: 513
# В какую систему счисления требуется перевести?: 2
# Число 513 в в основании 2: 1000000001

# Двоичная, восьмеричная и шестнадцатеричная системы счисления

# В информатике и программировании часто используются двоичная, восьмеричная и шестнадцатеричная системы счисления.
# В Python встроены три функции bin(), oct(), hex(), которые возвращают строковые представления целого десятичного
# числа в соответствующей системе счисления (2,8,16).

# Функция bin()
# Функция bin() возвращает строку с двоичным представлением указанного целого числа.

# Следующий программный код:
print(bin(10))
print(bin(128))
print(bin(150))
print(bin(18765))
# выводит:

# 0b1010
# 0b10000000
# 0b10010110
# 0b100100101001101

# Важно: обратите внимание на приставку 0b, которая сигнализирует о том,
# что число представлено в двоичной системе счисления.

# Функция oct()

# Функция oct() возвращает строку с восьмеричным представлением указанного целого числа.

# Следующий программный код:
print(oct(10))
print(oct(128))
print(oct(150))
print(oct(18765))
# выводит:
# 0o12
# 0o200
# 0o226
# 0o44515

# Важно: обратите внимание на приставку 0o, которая сигнализирует о том,
# что число представлено в восьмеричной системе счисления.

# Функция hex()

# Функция hex() возвращает строку с шестнадцатеричным представлением указанного целого числа.

# Следующий программный код:
print(hex(10))
print(hex(128))
print(hex(150))
print(hex(18765))
# выводит:
# 0xa
# 0x80
# 0x96
# 0x494d

# Важно: обратите внимание на приставку 0x, которая сигнализирует о том, что число представлено в
# шестнадцатеричной системе счисления.

# Примечания
# Примечание 1. Если нам требуется избавиться от приставок 0b, 0o, 0x, то мы можем воспользоваться строковым срезом:

num = 127

bin_num = bin(num)  # 0b1111111
oct_num = oct(num)  # 0o177
hex_num = hex(num)  # 0x7f

print(bin_num[2:])  # 1111111
print(oct_num[2:])  # 177
print(hex_num[2:])  # 7f

# Примечание 2. Обратите внимание, что функция hex() возвращает шестнадцатеричное число с
# маленькими символами a, b, c, d, e, f. Для преобразования к верхнему регистру
# можно использовать строковый метод upper():

num = 127432

hex_num = hex(num)          # 0x1f1c8
print(hex_num[2:].upper())  # 1F1C8

# BOH

# На вход программе подается натуральное число в десятичной системе счисления.
# Напишите программу, которая переводит его в двоичную, восьмеричную и шестнадцатеричную системы счисления.

# Формат входных данных
# На вход программе подается натуральное число.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание 1. Используйте встроенные функции bin(), oct(), hex().

# Примечание 2. Для шестнадцатеричной системы счисления используйте заглавные буквы A, B, C, D, E, F.

# Примечание 3. BOH = Binary, Octal, Hex.

def bin_oct_hex(num):
  """
  Функция, переводящая десятичное число в двоичную, восьмеричную и шестнадцатеричную системы счисления.

  Args:
      num: Десятичное число.

  Returns:
      Кортеж из трех строк: двоичное, восьмеричное и шестнадцатеричное представление числа.
  """
  return bin(num)[2:], oct(num)[2:], hex(num)[2:].upper()

# Ввод десятичного числа
num = int(input())

# Получение двоичного, восьмеричного и шестнадцатеричного представления
bin_str, oct_str, hex_str = bin_oct_hex(num)

# Вывод результатов
print(bin_str)
print(oct_str)
print(hex_str)
